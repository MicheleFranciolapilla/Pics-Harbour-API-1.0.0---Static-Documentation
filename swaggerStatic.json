{
  "openapi": "3.0.0",
  "info": {
    "title": "Pics Harbour (Local) - API - Version 1.0.0 < Documentation >\n",
    "version": "1.0.0",
    "description": "---\n---\n- ***Concept***: API designed to allow all registered users (who are automatically assigned the Publisher role during registration) to publish their own `pictures` along with a title, description, and links to specific `categories`.<br><br><br>\n- ***Data storage***: All data related to pictures, categories and users themselves are stored in a relational database and into the server.<br><br><br>\n- ***Users***:<br><br>\n  - `Guest`: Unregistered user.<br><br>\n  - `Publisher`: Registered user able to create picture records.<br><br>\n  - `Admin`: Registered user with administration role.<br><br>\n---\n---\n- ***Guests***:<br><br>\n  - Can retrieve a list of registered users (minimal information for Admin, more detailed ones for Publisher).<br><br>\n  - Access information about a specific Publisher.<br><br>\n  - Can obtain a detailed list of all visible pictures (for each picture the visibility is managed by the owning Publisher and, for moderation purposes, also by Admin).<br><br>\n  - Access all visible pictures owned by a specific Publisher.<br><br>\n  - Can obtain detailed information about a specific picture.<br><br>\n  - Access a list of categories.<br><br>\n  - Can obtain information about a specific category.<br><br><br>\n---\n- ***Publishers***:<br><br>\n  - Access all information available to guests through public routes.<br><br>\n  - Access more detailed information through private routes dedicated to them (routes protected by JWT authorization tokens).<br><br>\n  - Can modify and delete their account data (personal data, credentials, and any thumbnail).<br><br>\n  - Can upload their pictures and set attributes such as title, optional description, linked categories, and visibility.<br><br>\n  - Can modify all data related to their pictures, except for the picture itself, which once uploaded cannot be modified but only deleted.<br><br>\n  - Can delete their pictures records from the database and the server.<br><br>\n  - Can request a detailed list of their pictures or information about a specific picture among their own.<br><br>\n  - Access information related to categories.<br><br><br>\n---\n- ***Admin***:<br><br>\n  - Can use guest routes (public routes).<br><br>\n  - Access more detailed information through private routes dedicated to them (routes protected by JWT authorization tokens).<br><br>\n  - Can modify and delete their account data (personal data, credentials, and any thumbnail).<br><br>\n  - Can obtain detailed information about pictures and publishers.<br><br>\n  - Can create, modify, and delete categories.<br><br>\n  - Can moderate individual pictures from a specific publisher or all pictures owned by a specific publisher by altering their visibility attribute.<br><br>\n---\n---\n- ***Features***:<br><br>\n  - All searches can be customized through the use of specific filters (variable depending on the role).<br><br>\n  - Additional information can be requested about the records searched.<br><br> \n  - Specific options can be set to obtain basic information about protected data.<br><br> \n  - Specific data formatting options can be set.<br><br> \n  - Pagination parameters can be set for the results obtained.<br><br>\n  - The route `/auth` provides endpoints for `signUp`, `logIn`, `logOut`\n---\n---\n- ***Overview***:<br><br>\n  The current version \"1.0.0\" has been developed with a focus on several aspects:<br><br>\n  - Prevention and management of all possible logical, syntactic, semantic errors, and those related to database connections. This does not rule out the possibility of unforeseen situations that may conceal bugs. In such cases, please kindly report them to the email contact `michele.franciolapilla@gmail.com`.<br><br>\n  - Adoption of the \"DRY\" (Don't Repeat Yourself) programming philosophy, which involves extensive modularization of functions and processes. This creates specific utilities that can be called with designated parameters by various, sometimes independent, code blocks.<br><br>\n  - Scalability, with a view to future developments of the project which, however, remains an exercise without commercial purposes, aimed at increasing knowledge of the programming tools used.<br><br>\n  - The API has been entirely developed in JavaScript using NodeJS (Express), with the inclusion of external libraries such as PrismaJS, JWT, BCrypt, and others.<br><br>\n\n- ***Improvements***:<br><br>\n  Improvements for future versions:<br><br>\n  - A module for cleaning and maintaining the database (specifically the blacklist table), invocable and programmable with timed functions, via a dedicated CLI and through API calls reserved for Admin role users.<br><br>\n  - Enhance JWT token consistency checks by comparing the payload with the user data recorded in the database.<br><br>\n  - Remove the id URL parameter for the `PUT` and `DELETE` methods of the `/private/users/:id` route.<br><br>\n  - Convert the current `/allowedQueries` endpoint, accessible from various routes, into a standalone route.<br><br>\n  - Implementation of middleware that enforces `Content-Type` more restrictively than the current version.<br><br>\n  - Role management through a dedicated table in the database.<br><br>\n  - Rename the id fields related to the users, pictures, and categories records to make them more immediately distinguishable.<br><br>\n  - Adopt a parameter on the `PUT` method of the `/private/publisher/pictures/:id` route that allows maintaining the already associated categories without the need to relist them.<br><br>\n  - Restrict the setting of visibility for a specific picture by the Publisher to require Admin consent, especially for pictures that have undergone moderation (made non-visible) by the Admin.<br><br>\n  - For the endpoints dedicated to moderating pictures, on the `/private/admin/pictures/visibility` route, provide more information in the response regarding the IDs and visibility status of the pictures concerned, before and after moderation.<br><br>\n  - Implement a dedicated exception to be thrown in case of unused queries.<br><br>\n  - Creation of a configuration file for variables and their patterns that coordinates all the project modules and allows for automatic creation of the `schema.prisma` file.<br><br>\n  - Option to select on the server whether or not to send all call results to the console.<br><br>\n  - Create a mechanism for selecting the language for API calls to the endpoints on the `/info` route.<br><br>\n  - A stricter system than the current one that requires the presence of at least one registered Admin.<br><br>\n  - A specific route to promote a Publisher to the role of Admin and also for the registration of an Admin role directly via API call. Currently, the sole Admin is created by a dedicated seeder during database creation, retrieving its data from the `.env` file.\n"
  },
  "servers": [
    {
      "url": "http://localhost:1976",
      "description": "Local server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "For endpoints that require authentication, the Bearer token must be provided in the `Authorization` header. <br> Example: <br> Authorization: Bearer your_access_token_here"
      }
    },
    "schemas": {
      "AuthorizationMiddlewareSchema": {
        "title": "Middleware: authorizationMiddleware",
        "description": "- ***Purpose***: Verifies the presence, correctness, and validity of the JWT Bearer token by retrieving it from the Authorization header, ensuring the protection of private routes.<br> \nAllows the route code to be processed only by users with a valid Bearer token.<br><br>\n- ***Functionality***: This middleware divides its functions among several lower-level middlewares:<br><br>\n  - ***authorizationConfigurer***: Stores a series of access parameters within the request, including the roles permitted for the route and the accessibility coefficient (determined by the numeric coefficients associated with each role, utilizing prime numbers).<br>\n  - ***tokenVerifier***: Locates and retrieves the token from the Authorization header, verifies its validity, checks that it is not expired or blacklisted, and then extracts and stores user-related data from it into the request for use in subsequent processing.<br>\n  - ***roleVerifier***: Ensures that the accessibility coefficient matches the user's role who is requesting access to the route.<br><br>\n- ***Exceptions***: Throws a `403` error code if the token is invalid, expired, or if the user's role does not permit access to the route.\n"
      },
      "ImageUploader": {
        "title": "Middleware: imageUploader",
        "description": "- ***Purpose***: Retrieves the file for which upload was requested using a Content-Type of multipart/form-data and verifies a series of parameters to ensure that only image files with extensions and sizes consistent with the requirements of the route are uploaded.<br><br>\n- ***Functionality***: Initially sets configuration variables based on the route and HTTP method, then sequentially calls a series of lower-level middlewares to execute all functionalities in a modular manner:<br><br>\n  - ***checkHTTPContentType***: Ensures the Content-Type matches the route and the method used, particularly requiring multipart/form-data for mandatory image file uploads, or validating it as a suitable Content-Type when file upload is optional.<br>\n  - ***Multer middleware***: Verifies the correctness of the field and the presence of the file, allowing uploads only if the file is of a valid type (image) and its extension is consistent with the route, with preliminary file validation data saved in the request.\n  - ***imageSizeValidator***: Completes the storage of file validation data in the request, particularly ensuring size consistency with the route's requirements.\n  - ***imageUploadProcessTerminator***: The final middleware in the chain, tasked with evaluating all validation data from previous middlewares and deciding whether to proceed to the subsequent route code or invoke an exception, based on the compatibility of the uploaded file data with the route's mandatory or optional parameters.<br><br>\n- ***Exceptions***: Throws a `415` error code if inconsistencies or errors are found during the upload process by any middleware in the chain.\n"
      },
      "QueryBracketNotationCaseInsSchema": {
        "title": "Middleware: queryBracketNotationCaseIns",
        "description": "- ***Purpose***: Reviews the entire query string to identify and verify query parameters that adhere to the bracket notation (e.g., query[key]=value) for their formal and syntactic correctness.<br>\nThis middleware also adjusts these parameters to support case-insensitive processing, ensuring consistent handling regardless of case variations in parameter keys.<br><br>\n- ***Functionality***: Does not remove unused query parameters from the query string that are not consumed by the API.<br><br>\n- ***Exceptions***: Throws a `400` error code if formal or syntactic errors are found.\n"
      },
      "ValidationMiddlewareSchema": {
        "title": "Middleware: validationMiddleware",
        "description": "- ***Purpose***: Receives a static schema (express validator schema) as a parameter, which is targeted based on the route at data in the body, params, query, or a combination thereof. It sequentially invokes lower-level middlewares.<br><br>\n- ***Functionality***: The lower-level middlewares execute all checking and result analysis operations:<br><br>\n  - ***checkSchema***: Acts as the executor of the express validator middleware chain.\n  - ***validationOutcome***: Analyzes the validation results from the express validator middlewares. Depending on these results and the invoked route and method, it decides whether to proceed with the route's code or invoke the appropriate exception. This may include preliminary cleanup and reset operations, such as removing an image file uploaded to the server.<br><br>\n- ***Exceptions***: Throws a `422` error code if any validation errors occur.\n"
      },
      "dynamicSchemaValidationChainSchema": {
        "title": "Middleware: dynamicSchemaValidationChain",
        "description": "- ***Purpose***: Involves an array of middlewares that are tasked with generating, validating, and managing the results of the validation of a dynamic schema based on the role of the user calling the `/private/users` route.<br> \nIt is directly invoked by the `GET` method of the `/private/users` and `/private/users/:id` endpoints in order to validate the correct schemas for the different query parameters accepted by the two endpoints.<br><br>\n- ***Functionality***: The array consists of the following middlewares:<br><br>\n  - ***dynamicSchemaGenerator***: Retrieves the role of the caller through the authorization token and, based on it, constructs the suitable validation schema for the query parameters.<br>\n  - ***dynamicSchemaExecutor***: Invokes, in sequence, all the specific middlewares of express validator to validate the dynamic schema.<br>\n  - ***validationOutcome***: Analyzes the validation results from the express validator middlewares. Depending on these results and the invoked route and method, it decides whether to proceed with the route's code or invoke the appropriate exception.<br><br>\n- ***Exceptions***: Throws a `422` error code if any validation errors occur.\n"
      },
      "CascadeUserUpdateValidatorsSchema": {
        "title": "Middleware: cascadeUserUpdateValidators",
        "description": "- ***Purpose***: Involves an array of middlewares that are tasked with generating, validating, and managing the results of the validation of a dynamic schema based on the role of the user calling the `/private/users/:id` route, `PUT` method.<br><br>\n- ***Functionality***: The array consists of the following middlewares:<br><br>\n  - ***dynamicSchemaGenerator***: Retrieves the role of the caller through the authorization token and, based on it, constructs the suitable validation schema for the body parameters.<br>\n  - ***dynamicSchemaExecutor***: Invokes, in sequence, all the specific middlewares of express validator to validate the dynamic schema.<br>\n  - ***validationOutcome***: Analyzes the validation results from the express validator middlewares. Depending on these results and the invoked route and method, it decides whether to proceed with the route's code or invoke the appropriate exception. This may include preliminary cleanup and reset operations, such as removing an image file uploaded to the server.<br><br>\n- ***Exceptions***: Throws a `422` error code if any validation errors occur.\n"
      },
      "CascadePasswordsValidatorsSchema": {
        "title": "Middleware: cascadePasswordsValidators",
        "description": "- ***Purpose***: It is an array that invokes, in sequence, validation middlewares on the individual body params passed to the `/private/users/:id/changepassword` route, method `PUT`, in order to maintain a consistent and sequential validation criterion rather than a group validation of all parameters.<br><br>\n- ***Functionality***: The array consists of the following middlewares:<br><br>\n  - ***validationMiddleware***: The validation middleware is invoked on the password parameter only.<br>\n  - ***validationMiddleware***: The validation middleware is invoked on the newPassword parameter only.<br>\n  - ***validateParams***: Validates all parameters so that the new password is different from the previous one and that the confirmNew parameter is present and confirms the new password.<br><br>\n- ***Exceptions***: Throws a `422` error code if any validation errors occur.\n"
      },
      "ValidateUserIdMatchSchema": {
        "title": "Middleware: validateUserIdMatch",
        "description": "- ***Purpose***: The middleware, used in the `/private/users` route for `PUT` and `DELETE` methods, serves to verify that the ID of the user calling the route matches the ID of the user whose data is intended to be modified or deleted. Its purpose is to prevent a user from modifying or deleting another user's personal data.<br><br>\n- ***Functionality***: The middleware retrieves the ID of the user calling the route directly from the authorization token, and the ID of the user whose data is intended to be modified or deleted from the URL parameters.<br>\nIn the event that the two IDs do not match, the middleware throws an exception and terminates, but first, if applicable, it deletes the image file saved on the server.<br><br>\n- ***Exceptions***: In the case of termination with an exception, a `403` error is thrown.\n"
      },
      "Middleware404Schema": {
        "title": "Middleware: middleware404",
        "description": "- ***Purpose***: It is invoked when the specified route is not found within the API routes. This is the typical 404 'Route Not Found' middleware.<br><br>\n- ***Functionality***:As soon as it is invoked, the middleware automatically throws a 404 'Route Not Found' error to the general error manager.<br><br>\n- ***Exceptions***: The thrown error is `404`.\n"
      },
      "ErrorManagerSchema": {
        "title": "Middleware: errorManager",
        "description": "- ***Purpose***: This is the general middleware for error management. It is the last element in the exception thrown stack.<br><br>\n- ***Functionality***:As soon as it is invoked, it returns a response to the client formatted based on the error received from the previous middlewares in the express error stack. If its invocation is not directly conveyed by previous middlewares, it issues a general error with code 500.<br><br>\n- ***Exceptions***: Throws either the received error or a `500` error code.\n"
      },
      "RegistrationSchema": {
        "title": "Request Data Model: User registration (without thumb)",
        "description": "Model of data to provide in `request.body` in case of registration (`signUp`) without an image file (`thumb`).",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/Registration"
          }
        ]
      },
      "RegistrationWithThumbSchema": {
        "title": "Request Data Model: User registration (with thumb)",
        "description": "Model of data to provide in `request.body` in case of registration (`signUp`) with an image file (`thumb`).<br>\nThe `Content-Type` must be `multipart/form-data`.\n",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/RegistrationWithThumb"
          }
        ]
      },
      "UserUpdateSchema": {
        "title": "Request Data Model: User data modification (without thumb)",
        "description": "Model of data to provide in `request.body` in case of update without an image file (`thumb`).",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/Update"
          }
        ]
      },
      "UserUpdateWithThumbSchema": {
        "title": "Request Data Model: User data modification (with thumb)",
        "description": "Model of data to provide in `request.body` in case of update with an image file (`thumb`).<br>\nThe `Content-Type` must be `multipart/form-data`.\n",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/UpdateWithThumb"
          }
        ]
      },
      "UserPasswordChangeSchema": {
        "title": "Request Data Model: Account password change",
        "description": "Model of data to provide in `request.body` in case of password change.",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/ChangePassword"
          }
        ]
      },
      "NewPictureSchema": {
        "title": "Request Data Model: New picture",
        "description": "Model of data to provide in `request.body` in case of creation of a new `picture` record.<br>\nThe `Content-Type` must be `multipart/form-data`.\n",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/NewPicture"
          }
        ]
      },
      "PictureUpdateSchema": {
        "title": "Request Data Model: Picture update",
        "description": "Model of data to provide in `request.body` in case of modification of a `picture` record.<br>\n",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/PictureUpdate"
          }
        ]
      },
      "NewCategorySchema": {
        "title": "Request Data Model: New category",
        "description": "Model of data to provide in `request.body` in case of creation of a new `category` record.<br>\nThe `Content-Type` must be `multipart/form-data`.\n",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/NewCategory"
          }
        ]
      },
      "CategoryUpdateSchema": {
        "title": "Request Data Model: Category update",
        "description": "Data model for the `request.body` when modifying a `category` record.<br> \nIf the update includes the `thumb` field, the `Content-Type` must be `multipart/form-data`.\n",
        "allOf": [
          {
            "$ref": "#/components/requestBodies/CategoryUpdate"
          }
        ]
      },
      "AllowedQueryKeySchema": {
        "title": "Model: Query Parameter's allowed `key-value pairs`",
        "description": "Query parameters enable clients to send additional information within the URL of `GET` requests.<br> \nThese parameters appear after a question mark (`?`) and are utilized across `GET` methods.<br> \nThey are processed in a `case-insensitive` manner to ensure uniform interpretation regardless of case variations.\n- Query parameters are formatted as key-value pairs using bracket notation (`queryParam[queryKey]=value`). This allows for structured data to be passed within URLs.<br>\n**Example** using the `include` query parameter:<br>\n  - URL: `/guest/users?include[pictures]=count`.<br>\n  - This retrieves users along with a count of how many pictures each user has, where \n    - `include` is the query parameter \n    - `include[pictures]` is the key\n    - `count` is the value.<br><br>\n- Multiple key-value pairs related to the same query parameter can be included in one `GET` request, enabling complex data retrieval in a single call.<br>\n**Example** using the `paging` query parameter:<br>\n  - URL: `/guest/users?paging[current]=2&paging[itemsPerPage]=5`.<br>\n  - This fetches the second page of users, displaying up to five users per page.<br><br>\n- It is also possible to combine different query parameters in the same request.<br>\n**Example** combining `include` and `paging` query parameters:<br>\n  - URL: `/guest/users?include[pictures]=count&paging[current]=2&paging[itemsPerPage]=5`.<br>\n  - This combines the conditions of the previous examples, retrieving users with picture counts on the second page, with five users per page.<br><br>\n\nThe structure and expected format for each `key-value pair` associated with specific query parameters are detailed in subsequent sections...\n",
        "type": "object",
        "properties": {
          "queryStr": {
            "type": "string",
            "description": "Identifies a potential key that may be permitted in the query parameter, depending on the endpoint's configuration.<br>\nThis property indicates whether the key is valid for use in the context of specific API endpoints.\n"
          },
          "queryFormat": {
            "type": "string",
            "description": "Defines the syntax to be used when incorporating this key in a query.<br> \nThis includes how to structure the key-value pair and any necessary formatting details.\n"
          },
          "valueFormat": {
            "type": "string",
            "description": "Describes the acceptable format and characteristics of the value associated with this key.<br> \nIt includes data types, potential value constraints, and examples of valid inputs.\n"
          },
          "required": {
            "type": "boolean",
            "description": "Indicates whether this query parameter key is mandatory for the request to be valid.<br> \nA value of `true` means the key must be included in the query.\n"
          },
          "infoRoute": {
            "type": "string",
            "description": "Provides the API endpoint that offers comprehensive and detailed information about this specific query parameter.\n"
          }
        }
      },
      "PagingInfoSchema": {
        "title": "Model: Paging information",
        "description": "Summary structure of all pagination parameters related to the search performed.",
        "type": "object",
        "properties": {
          "totalItems": {
            "type": "integer",
            "description": "The total number of retrieved records."
          },
          "itemsPerPage": {
            "type": "integer",
            "minimum": 1,
            "description": "The maximum number of records per page."
          },
          "totalPages": {
            "type": "integer",
            "description": "The total number of available pages."
          },
          "currentPage": {
            "type": "integer",
            "minimum": 1,
            "description": "The current page number."
          }
        }
      },
      "ResponseSchemaForSuccess": {
        "title": "Response: Success",
        "description": "Standard response in case of success.",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "value": true
          },
          "outcome": {
            "description": "Object containing all data returned by the route.",
            "type": "object"
          }
        }
      },
      "ResponseAllowedQueries": {
        "title": "Response: Allowed Queries",
        "description": "This schema represents the structure of responses from the `/allowedQueries` endpoints.<br> \nFor `public` routes (e.g., `/guest/users`), responses always return successfully with `status 200`.<br> For `private` routes (e.g., `/private/users`), responses can either be successful or return an error `status 403 (user not allowed)` if the request fails `authorization` checks.<br>\nEach successful response encapsulates information about the permissible query parameters specific to the route's `GET` methods.<br><br>\nThe following details pertain to the successful response. For failure responses, refer to the schema `Response: Failure - Error 403 (user not allowed)`.\n",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "value": true
          },
          "outcome": {
            "description": "A dynamic object where each key corresponds to a different query parameter accepted by the current route's `GET` method.<br> \nEach key is named following the convention `[parameterName]Queries`.<br> \n- **Example**: The `filters` query parameter is detailed in an object named `filtersQueries`.<br>\n\nThe value for each key is an array containing objects that define the permissible key-value pairs for that specific query parameter.<br> \nThese objects reflect the definitions found in the `Model: Query Parameter's allowed key-value pairs` schema and include details such as \n  - the permissible keys (`queryStr`) \n  - their required format (`queryFormat`)\n  - the acceptable values (`valueFormat`) \n  - whether the key is required (`required`)\n  - the endpoint providing detailed information (`infoRoute`)<br><br>\n\nThis structure allows for detailed, organized presentation of all query parameters applicable to a route, making it straightforward to understand and implement by clients.\n",
            "type": "object"
          }
        }
      },
      "ResponseSchemaForFailure": {
        "title": "Response: Failure for general 4xx exceptions (depending on provided data)",
        "description": "Standard response in case of failure depending on provided data, except for errors 403 (Authorization on protected routes), 415 and 422.",
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "value": false
          },
          "outcome": {
            "type": "object",
            "description": "Object containing detailed information about the thrown exception.",
            "properties": {
              "status": {
                "type": "integer",
                "description": "The error status code."
              },
              "message": {
                "type": "string",
                "description": "The error message."
              },
              "error": {
                "type": "string",
                "description": "The error constructor name."
              }
            }
          }
        }
      },
      "ResponseSchemaForFailure-400-OnQueryParameters": {
        "title": "Response: Failure - Error 400 (invalid query parameters)",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "description": "Standard response in case of `syntax errors` on `query parameters`.",
            "properties": {
              "outcome": {
                "type": "object",
                "properties": {
                  "status": {
                    "value": 400
                  },
                  "message": {
                    "type": "string",
                    "description": "The error message can vary depending on the invalid query part."
                  },
                  "error": {
                    "value": "ErrorInvalidQuery"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseSchemaForFailure-403-OnAuthorizationByBearer": {
        "title": "Response: Failure - Error 403 (user not allowed)",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "description": "Standard response in case of missing, wrong, expired or blacklisted JWT in `Authorization` header (Error 403).",
            "properties": {
              "outcome": {
                "type": "object",
                "properties": {
                  "status": {
                    "value": 403
                  },
                  "message": {
                    "value": "User not allowed to perform the requested operation."
                  },
                  "error": {
                    "value": "ErrorUserNotAllowed"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseSchemaForFailure-415-OnImageUpload": {
        "title": "Response: Failure - Error 415 (invalid image file)",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "description": "Standard response in case of image file upload failure (Error 415).",
            "properties": {
              "outcome": {
                "type": "object",
                "properties": {
                  "status": {
                    "value": 415
                  },
                  "message": {
                    "type": "string",
                    "description": "One of the following error messages:\n- Missing Content-Type in the request.\n- The Content-Type 'multipart/form-data' is required for this route.\n- Image file is required.\n- Multer configuration error.\n- Unsupported file.\n"
                  },
                  "report": {
                    "description": "**Only for Error 415**: Object with details about the file upload failure."
                  },
                  "error": {
                    "description": "One of the following error constructor names:\n- ErrorMulterMiddleware\n- ErrorUnsupportedFile\n"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseSchemaForFailure-422-OnDataValidation": {
        "title": "Response: Failure - Error 422 (validation error)",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "description": "Standard response in case of data validation error (Error 422).",
            "properties": {
              "outcome": {
                "type": "object",
                "properties": {
                  "status": {
                    "value": 422
                  },
                  "message": {
                    "value": "Errors in request validation"
                  },
                  "error": {
                    "value": "ErrorRequestValidation"
                  },
                  "validationErrors": {
                    "description": "**Only for Error 422**: Array of objects with details about data validation errors."
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseSchemaForFailure-503-DB": {
        "title": "Response: Failure - Error 503 (database unavailable)",
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "description": "Standard response when the database is inaccessible or unavailable to perform the requested operation.",
            "properties": {
              "outcome": {
                "type": "object",
                "properties": {
                  "status": {
                    "value": 503
                  },
                  "message": {
                    "value": "Service temporarily unavailable."
                  },
                  "error": {
                    "value": "ErrorFromDB"
                  }
                }
              }
            }
          }
        ]
      }
    },
    "requestBodies": {
      "CategoryBasic": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the category",
            "minLength": 3,
            "maxLength": 30,
            "pattern": "^[a-zA-Z ]+$"
          },
          "thumb": {
            "type": "string",
            "format": "binary",
            "description": "The category's thumbnail.<br> \nIt must be in `multipart/form-data` format.<br> \nSpecifications:\n- Type: `image`.\n- Max size: `0.1 MB`.\n- Extensions: `jpg,jpeg`.\n"
          }
        }
      },
      "NewCategory": {
        "allOf": [
          {
            "$ref": "#/components/requestBodies/CategoryBasic"
          },
          {
            "type": "object",
            "required": [
              "name",
              "thumb"
            ]
          }
        ]
      },
      "CategoryUpdate": {
        "allOf": [
          {
            "$ref": "#/components/requestBodies/CategoryBasic"
          },
          {
            "type": "object",
            "properties": {
              "disconnect": {
                "type": "boolean",
                "description": "Attribute used to disconnect (if `true`) the category from all connected `pictures`.",
                "default": false
              }
            }
          }
        ]
      },
      "Credentials": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "Access password"
          }
        }
      },
      "Registration": {
        "type": "object",
        "required": [
          "name",
          "surname",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "minLength": 2,
            "maxLength": 20,
            "pattern": "^[a-zA-Z ]+$"
          },
          "surname": {
            "type": "string",
            "description": "User's surname",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^[a-zA-Z ]+$"
          },
          "email": {
            "type": "string",
            "description": "User's email (must be unique within the entire database)",
            "format": "email",
            "minLength": 5,
            "maxLength": 100
          },
          "password": {
            "type": "string",
            "description": "Access password with the following requirements:<br>\n- At least one lowercase character.\n- At least one uppercase character.\n- At least one digit.\n- At least one symbol.\n- Spaces at the beginning and end of the password are not considered in the validation.\n",
            "minLength": 8,
            "maxLength": 20
          },
          "website": {
            "type": "string",
            "description": "URL of the user's website.<br> \nThis field is optional, meaning it can be entirely omitted.<br> \nIf provided, it cannot be an empty string. Ensure the URL is well-formed and does not exceed the maximum length specified.          \n",
            "maxLength": 255,
            "default": null
          }
        }
      },
      "RegistrationWithThumb": {
        "allOf": [
          {
            "$ref": "#/components/requestBodies/Registration"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "thumb": {
            "type": "string",
            "format": "binary",
            "description": "Optional user thumbnail image.<br> \nIf provided, it must be in `multipart/form-data` format.<br> \nNon-compliant files will be ignored without error.<br>\nSpecifications:\n- Type: `image`.\n- Max size: `0.5 MB`.\n- Extensions: `jpg,jpeg,png`.\n",
            "default": null
          }
        }
      },
      "CheckToken": {
        "type": "object",
        "required": [
          "token"
        ],
        "properties": {
          "token": {
            "type": "string",
            "format": "jwt",
            "description": "JWT token to be validated."
          }
        }
      },
      "Update": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name",
            "minLength": 2,
            "maxLength": 20,
            "pattern": "^[a-zA-Z ]+$"
          },
          "surname": {
            "type": "string",
            "description": "User's surname",
            "minLength": 2,
            "maxLength": 30,
            "pattern": "^[a-zA-Z ]+$"
          },
          "website": {
            "type": "string",
            "description": "URL of the user's website.<br> \nIf provided, it cannot be an empty string. Ensure the URL is well-formed and does not exceed the maximum length specified.          \n",
            "maxLength": 255
          },
          "noWebsite": {
            "type": "boolean",
            "description": "If set to true, it removes (setting it to null) the identifying string of the website if present.<br> \nIf a new value for the website is also provided, the noWebsite parameter takes precedence if it is present and set to true.\n",
            "default": false
          },
          "noThumb": {
            "type": "boolean",
            "description": "If set to true, it removes (setting it to null) the user thumbnail image if present.\n",
            "default": false
          }
        }
      },
      "UpdateWithThumb": {
        "allOf": [
          {
            "$ref": "#/components/requestBodies/Update"
          },
          {
            "type": "object"
          }
        ],
        "properties": {
          "thumb": {
            "type": "string",
            "format": "binary",
            "description": "User thumbnail image.<br> \nIf provided, it must be in `multipart/form-data` format.<br> \nNon-compliant files will be ignored without error and the previous thumb file, if present, is kept.<br>\nSpecifications:\n- Type: `image`.\n- Max size: `0.5 MB`.\n- Extensions: `jpg,jpeg,png`.\n",
            "default": null
          },
          "noThumb": {
            "description": "If set to true, it removes (setting it to null) the user thumbnail image if present.<br>\nIf a new thumbnail image is also provided, the noThumb parameter takes precedence if it is present and set to true.\n"
          }
        }
      },
      "ChangePassword": {
        "type": "object",
        "required": [
          "password",
          "newPassword",
          "confirmNew"
        ],
        "properties": {
          "password": {
            "type": "string",
            "description": "Access password"
          },
          "newPassword": {
            "type": "string",
            "description": "The new password with the following requirements:<br>\n- At least one lowercase character.\n- At least one uppercase character.\n- At least one digit.\n- At least one symbol.\n- Spaces at the beginning and end of the password are not considered in the validation.\n",
            "minLength": 8,
            "maxLength": 20
          },
          "confirmNew": {
            "type": "string",
            "description": "Must be the exact copy of `newPassword`, disregarding any leading or trailing spaces."
          }
        }
      },
      "PictureUpdate": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the picture.",
            "minLength": 10,
            "maxLength": 50
          },
          "description": {
            "type": "string",
            "description": "A text describing the picture, its context, and any related details.",
            "maxLength": 1000
          },
          "visible": {
            "type": "boolean",
            "description": "A boolean value that qualifies the picture as visible (i.e., viewable by any user, registered or not) or not visible."
          },
          "categories": {
            "type": "array",
            "description": "An array made by existent categories IDs<br>",
            "items": {
              "type": "integer",
              "description": "Each `category` must refer to an existent category ID.<br>"
            }
          }
        }
      },
      "NewPicture": {
        "allOf": [
          {
            "$ref": "#/components/requestBodies/PictureUpdate"
          },
          {
            "type": "object",
            "required": [
              "title",
              "image"
            ],
            "properties": {
              "description": {
                "default": null
              },
              "visible": {
                "default": false
              },
              "image": {
                "type": "string",
                "format": "binary",
                "description": "The picture record's image.<br> \nIt must be in `multipart/form-data` format.<br> \nSpecifications:\n- Type: `image`.\n- Max size: `5 MB`.\n- Extensions: `jpg,jpeg,png,webp`.\n"
              },
              "categories": {
                "default": []
              }
            }
          }
        ]
      }
    },
    "responses": {
      "CategoriesBasicData": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique category ID",
            "type": "integer"
          },
          "name": {
            "description": "The name of the category",
            "type": "string"
          },
          "thumb": {
            "description": "The filename of the category's thumbnail stored on the server.",
            "type": "string"
          }
        }
      },
      "CategoriesDataForGuestCategoriesRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/CategoriesBasicData"
          },
          {
            "type": "object",
            "properties": {
              "createdAt": {
                "description": "The date and time when the category was registered in the database.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "CategoriesDataForPublisherCategoriesRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/CategoriesBasicData"
          },
          {
            "type": "object",
            "properties": {
              "ownerId": {
                "description": "The Admin ID associated with the category.",
                "type": "integer"
              },
              "createdAt": {
                "description": "The date and time when the category was registered in the database.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "CategoriesDataForAdminCategoriesRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/CategoriesBasicData"
          },
          {
            "type": "object",
            "properties": {
              "slug": {
                "description": "The slugged category's name.",
                "type": "string"
              },
              "ownerId": {
                "description": "The Admin ID associated with the category.",
                "type": "integer"
              },
              "createdAt": {
                "description": "The date and time when the category was registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time referred to the last update of the category's data and/or thumbnail.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "PicturesBasicData": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique picture ID",
            "type": "integer"
          },
          "title": {
            "description": "The title of the picture",
            "type": "string"
          },
          "description": {
            "description": "A text describing the picture, its context, and any related details.",
            "type": "string",
            "nullable": true
          },
          "image": {
            "description": "The filename of the picture's image stored on the server.",
            "type": "string"
          },
          "visible": {
            "description": "A boolean value that qualifies the picture as visible (i.e., viewable by any user, registered or not) or not visible.",
            "type": "boolean"
          }
        }
      },
      "PicturesDataForGuestPicturesRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/PicturesBasicData"
          },
          {
            "type": "object",
            "description": "The `categories` field is conditionally included based on the **include[categories]** query parameter.<br><br>\nSee `/info/apiqueries?queryparam[info]=include`.<br><br>\nThe `categories` field:\n- is not present if the **visible** field of the picture is **false**.<br>\n- is not present if **include[categories]** is **not used** or is set to **none**.<br>\n- is an object with the only property `count` if **include[categories]** is set to **count**.<br>\n- is an array of objects if **include[categories]** is set to **complete**.<br>\n",
            "properties": {
              "ownerId": {
                "description": "The ID of the Publisher that owns the picture.",
                "type": "integer"
              },
              "createdAt": {
                "description": "The date and time when the picture was registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "categories": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "The number of `categories` connected to the picture."
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "title": null,
                      "type": "object",
                      "description": "Detailed information about each category connected to the picture."
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "PicturesDataForPrivatePublisherPicturesRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/PicturesBasicData"
          },
          {
            "type": "object",
            "description": "The `categories` field is conditionally included based on the **include[categories]** query parameter.<br><br>\nSee `/info/apiqueries?queryparam[info]=include`.<br><br>\nThe `categories` field:\n- is not present if **include[categories]** is **not used** or is set to **none**.<br>\n- is an object with the only property `count` if **include[categories]** is set to **count**.<br>\n- is an array of objects if **include[categories]** is set to **complete**.<br>\n",
            "properties": {
              "createdAt": {
                "description": "The date and time when the picture was registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time of the last update to the picture's data.",
                "type": "string",
                "format": "date-time"
              },
              "categories": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "The number of `categories` connected to the picture."
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "title": null,
                      "type": "object",
                      "description": "Detailed information about each category connected to the picture."
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "PicturesDataForPrivatePublisherPicturesPOSTRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/PicturesBasicData"
          },
          {
            "type": "object",
            "properties": {
              "ownerId": {
                "description": "The ID of the Publisher that owns the picture.",
                "type": "integer"
              },
              "createdAt": {
                "description": "The date and time when the picture was registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time of the last update to the picture's data.",
                "type": "string",
                "format": "date-time"
              },
              "categories": {
                "description": "All categories (array of existing category IDs) connected to the picture."
              }
            }
          }
        ]
      },
      "PicturesDataForPrivatePublisherPicturesDeleteRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/PicturesBasicData"
          },
          {
            "type": "object",
            "properties": {
              "ownerId": {
                "description": "The ID of the Publisher that owns the picture.",
                "type": "integer"
              },
              "createdAt": {
                "description": "The date and time when the picture was registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time of the last update to the picture's data.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "PicturesDataForPrivateAdminPicturesRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/PicturesBasicData"
          },
          {
            "type": "object",
            "description": "The `categories` field is conditionally included based on the **include[categories]** query parameter.<br><br>\nSee `/info/apiqueries?queryparam[info]=include`.<br><br>\nThe `categories` field:\n- is not present if **include[categories]** is **not used** or is set to **none**.<br>\n- is an object with the only property `count` if **include[categories]** is set to **count**.<br>\n- is an array of objects if **include[categories]** is set to **complete**.<br>\n",
            "properties": {
              "ownerId": {
                "description": "The ID of the Publisher that owns the picture.",
                "type": "integer"
              },
              "createdAt": {
                "description": "The date and time when the picture was registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time of the last update to the picture's data.",
                "type": "string",
                "format": "date-time"
              },
              "categories": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "The number of `categories` connected to the picture."
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "title": null,
                      "type": "object",
                      "description": "Detailed information about each category connected to the picture."
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "UsersBasicData": {
        "type": "object",
        "properties": {
          "id": {
            "description": "A unique user ID.",
            "type": "integer"
          },
          "name": {
            "description": "The name of the user.",
            "type": "string"
          },
          "surname": {
            "description": "The surname of the user.",
            "type": "string"
          }
        }
      },
      "UsersDataForGuestUsersRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/UsersBasicData"
          },
          {
            "type": "object",
            "description": "The `pictures` field is conditionally included based on the **include[pictures]** query parameter.<br><br>\nSee `/info/apiqueries?queryparam[info]=include`.<br><br>\nThe `pictures` field:\n- is not present if the role of the user is **Admin**.<br>\n- is not present if **include[pictures]** is **not used** or is set to **none**.<br>\n- is an object with the only property `count` if **include[pictures]** is set to **count**.<br>\n- is an array of objects if **include[pictures]** is set to **basic** or **complete**.<br>\n",
            "properties": {
              "role": {
                "description": "The role of the user.",
                "type": "string"
              },
              "thumb": {
                "description": "The filename of the user's image stored on the server.",
                "type": "string",
                "nullable": true
              },
              "website": {
                "description": "The URL of the user's website.",
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "description": "The date and time when the user registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "pictures": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "The number of `pictures` owned by the `Publisher`."
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "title": null,
                      "type": "object",
                      "description": "Detailed information about each picture, varying depending on whether 'basic' or 'complete' is selected."
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "UsersDataForPrivateUsersRoute": {
        "allOf": [
          {
            "$ref": "#/components/responses/UsersBasicData"
          },
          {
            "type": "object",
            "description": "The `pictures` field is conditionally included based on the **include[pictures]** query parameter.<br><br>\nSee `/info/apiqueries?queryparam[info]=include`.<br><br>\nThe `pictures` field:\n- is not present if the role of the user is **Admin**.<br>\n- is not present if **include[pictures]** is **not used** or is set to **none**.<br>\n- is an object with the only property `count` if **include[pictures]** is set to **count**.<br>\n- is an array of objects if **include[pictures]** is set to **basic** or **complete**.<br>\n",
            "properties": {
              "email": {
                "description": "The email of the user, unique across the entire database.",
                "type": "string"
              },
              "role": {
                "description": "The role of the user.",
                "type": "string"
              },
              "thumb": {
                "description": "The filename of the user's image stored on the server.",
                "type": "string",
                "nullable": true
              },
              "website": {
                "description": "The URL of the user's website.",
                "type": "string",
                "nullable": true
              },
              "createdAt": {
                "description": "The date and time when the user registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "pictures": {
                "oneOf": [
                  {
                    "type": "object",
                    "properties": {
                      "count": {
                        "type": "integer",
                        "description": "The number of `pictures` owned by the `Publisher`."
                      }
                    }
                  },
                  {
                    "type": "array",
                    "items": {
                      "title": null,
                      "type": "object",
                      "description": "Detailed information about each picture, varying depending on whether 'basic' or 'complete' is selected."
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "UsersCompleteData": {
        "allOf": [
          {
            "$ref": "#/components/responses/UsersBasicData"
          },
          {
            "type": "object",
            "properties": {
              "email": {
                "description": "The email of the user, unique across the entire database.",
                "type": "string"
              },
              "role": {
                "description": "The role of the user.",
                "type": "string"
              },
              "thumb": {
                "description": "The filename of the user's image stored on the server.",
                "type": "string",
                "nullable": true
              },
              "website": {
                "description": "The URL of the user's website.",
                "type": "string",
                "nullable": true
              },
              "tokenExpAt": {
                "description": "The date and time when the user's token expires.",
                "type": "string",
                "nullable": true,
                "format": "date-time"
              },
              "createdAt": {
                "description": "The date and time when the user registered in the database.",
                "type": "string",
                "format": "date-time"
              },
              "updatedAt": {
                "description": "The date and time of the last update to the user's data.",
                "type": "string",
                "format": "date-time"
              }
            }
          }
        ]
      },
      "DeletedUser": {
        "allOf": [
          {
            "$ref": "#/components/responses/UsersCompleteData"
          },
          {
            "type": "object",
            "properties": {
              "pictures": {
                "description": "An array containing all the `pictures` owned by the `user`, which are deleted concurrently with the account.<br> \nThe array will be empty if the user is an `Admin` or if `Publisher` without pictures.\n"
              }
            }
          }
        ]
      },
      "JWTPayload": {
        "allOf": [
          {
            "$ref": "#/components/responses/UsersBasicData"
          },
          {
            "type": "object",
            "description": "The JWT payload as returned by the `verify` method.",
            "properties": {
              "role": {
                "description": "The role of the user.",
                "type": "string"
              },
              "email": {
                "description": "The email of the user, unique across the entire database.",
                "type": "string"
              },
              "iat": {
                "description": "(Issued At). The timestamp indicating when the token was released.",
                "type": "integer",
                "format": "int64"
              },
              "exp": {
                "description": "(Expiration Time). The timestamp indicating when the token expires.",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "ResponseAllowedQueries": {
        "description": "***All allowed query parameters are returned.***",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                },
                {
                  "type": "object",
                  "description": "All the query parameters accepted by the current route's `GET` method.",
                  "properties": {
                    "outcome": {
                      "type": "object",
                      "description": "See the detailed schemas:\n- Model: Query Parameter's allowed key-value pairs\n- Response: Allowed Queries\n"
                    }
                  }
                }
              ]
            },
            "examples": {
              "Allowed queries object": {
                "value": {
                  "success": true,
                  "outcome": "Object with the list of all allowed queries as detailed into the schemas `Model: Query Parameter's allowed key-value pairs` and `Response: Allowed Queries`"
                }
              }
            }
          }
        }
      },
      "ResponseError400": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure-400-OnQueryParameters"
          },
          {
            "title": "Error 400 (invalid query parameters)"
          },
          {
            "description": null
          },
          {
            "type": "object",
            "properties": {
              "outcome": {
                "type": "object",
                "description": null,
                "properties": {
                  "status": {
                    "description": null
                  },
                  "error": {
                    "description": null
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError401-InvalidPassword": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 401 - Invalid password",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 401
                  },
                  "message": {
                    "description": null,
                    "value": "Invalid password!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorInvalidData"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError401-InvalidBearer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 401 (missing, wrong, expired or blacklisted Bearer token)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 401
                  },
                  "message": {
                    "description": null,
                    "value": "Invalid token (in black list / expired / wrong / missing)!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorInvalidData"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-UserLoggedIn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (already logged-in)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "User already logged In."
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorOperationRefused"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-Refused": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (operation refused)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "Operation refused."
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorFromDB"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-AdminDeletionRefused": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (Unique Admin deletion refused)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "The 'unique' Admin cannot be deleted."
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorOperationRefused"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-UserIsNotPublisher": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (UserId doesn't own to Publisher)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "The user is not a Publisher."
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorOperationRefused"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-PublisherIsNotOwner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (The Publisher doesn't own the picture)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "The publisher is not the owner of the picture."
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorOperationRefused"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-UserIdMatchError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (user Id doesn't match)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "User not allowed to delete or modify another user's data!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorUserNotAllowed"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-PublisherIdMatchError": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 403 (The requester Publisher is not the owner of the picture)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 403
                  },
                  "message": {
                    "description": null,
                    "value": "User not allowed to delete/modify another user's picture!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorUserNotAllowed"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError403-Authorization": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure-403-OnAuthorizationByBearer"
          },
          {
            "title": "Error 403 (user not allowed)"
          },
          {
            "description": null
          },
          {
            "type": "object",
            "properties": {
              "outcome": {
                "type": "object",
                "description": null,
                "properties": {
                  "status": {
                    "description": null
                  },
                  "message": {
                    "description": null
                  },
                  "error": {
                    "description": null
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError404-UserNotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 404 (user not found)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 404
                  },
                  "message": {
                    "description": null,
                    "value": "User not found!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorResourceNotFound"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError404-UserIdNotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 404 (user id not found)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 404
                  },
                  "message": {
                    "description": null,
                    "value": "User id not found!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorResourceNotFound"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError404-PictureIdNotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 404 (picture id not found)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 404
                  },
                  "message": {
                    "description": null,
                    "value": "Picture id not found!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorResourceNotFound"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError404-CategoryIdNotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 404 (category id not found)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 404
                  },
                  "message": {
                    "description": null,
                    "value": "Category id not found!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorResourceNotFound"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError404-PublisherIdNotFound": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 404 (publisher id not found)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 404
                  },
                  "message": {
                    "description": null,
                    "value": "Publisher id not found!"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorResourceNotFound"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError409-InvalidEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 409 (invalid email)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 409
                  },
                  "message": {
                    "description": null,
                    "value": "Invalid email because already existing into the database."
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorRepeatedData"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError409-InvalidSlug": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure"
          },
          {
            "type": "object",
            "title": "Error 409 (invalid name - slug already exists)",
            "description": null,
            "properties": {
              "outcome": {
                "description": null,
                "type": "object",
                "properties": {
                  "status": {
                    "description": null,
                    "value": 409
                  },
                  "message": {
                    "description": null,
                    "value": "Invalid slug because already existing into the database"
                  },
                  "error": {
                    "description": null,
                    "value": "ErrorRepeatedData"
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError415": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure-415-OnImageUpload"
          },
          {
            "title": "Error 415 (invalid image file)"
          },
          {
            "description": null
          },
          {
            "type": "object",
            "properties": {
              "outcome": {
                "type": "object",
                "description": null,
                "properties": {
                  "status": {
                    "description": null
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError422": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ResponseSchemaForFailure-422-OnDataValidation"
          },
          {
            "title": "Error 422 (validation error)"
          },
          {
            "description": null
          },
          {
            "type": "object",
            "properties": {
              "outcome": {
                "type": "object",
                "description": null,
                "properties": {
                  "status": {
                    "description": null
                  },
                  "message": {
                    "description": null
                  },
                  "error": {
                    "description": null
                  }
                }
              }
            }
          }
        ]
      },
      "ResponseError503": {
        "description": "***Error due to unavailable database.***",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResponseSchemaForFailure-503-DB"
                },
                {
                  "type": "object",
                  "description": null,
                  "properties": {
                    "outcome": {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "status": {
                          "description": null
                        },
                        "message": {
                          "description": null
                        },
                        "error": {
                          "description": null
                        }
                      }
                    }
                  }
                }
              ]
            },
            "examples": {
              "Error 503": {
                "value": {
                  "success": false,
                  "outcome": {
                    "status": 503,
                    "message": "Service temporarily unavailable.",
                    "error": "ErrorFromDB"
                  }
                }
              }
            }
          }
        }
      }
    },
    "parameters": {
      "ExtraFailureObjectParam": {
        "name": "extra[failureobject]",
        "in": "query",
        "description": "This optional parameter allows you to request additional information about the **response format** in case of an API call failure.<br> \nSetting `extra[failureobject]=true` includes detailed failure object data in the response, enhancing error diagnostics.<br> \nThis parameter supports only `true` or `false` values.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "FiltersThumbParam": {
        "name": "filters[thumb]",
        "in": "query",
        "description": "Filter that allows narrowing the search to users who have (if `true`) or do not have (if `false`) their own `thumb` (image file saved on the server).<br> \nIf this query is absent, no filtering will be applied based on the `thumb` column.\n",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "FiltersWebsiteParam": {
        "name": "filters[website]",
        "in": "query",
        "description": "Filter that allows narrowing the search to users who have (if `true`) or do not have (if `false`) their own `website` registered into the database.<br> \nIf this query is absent, no filtering will be applied based on the `website` column.\n",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "FiltersTitleTextParam": {
        "name": "filters[titletext]",
        "in": "query",
        "description": "Allows filtering of pictures by **searching text** within their `titles`.<br> \nThis filter supports `case-insensitive` search to ensure broader matching.<br>\nIf this query is absent, no filtering will be applied based on the `title` column.<br><br>\n`Example` in the input box below: `filters[titletext]=light`.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "light"
        }
      },
      "FiltersDescriptionTextParam": {
        "name": "filters[descriptiontext]",
        "in": "query",
        "description": "Enables narrowing the search to pictures whose **description contains specified text**.<br> \nThe search is `case-insensitive`, allowing for more flexible text matching.<br>\nIf this query is absent, no filtering will be applied based on the `description` column.<br><br>\n`Example` in the input box below: `filters[descriptiontext]=ocean`.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "ocean"
        }
      },
      "FiltersSlugTextParam": {
        "name": "filters[slugtext]",
        "in": "query",
        "description": "Allows for `case-insensitive` filtering of entries by matching the specified text against their `slug` field.<br> \nA slug typically represents a URL-friendly version of a name or title.<br>\nThis filter is useful for quickly locating entries with similar or exact slugs.<br>\nIf this query is absent, no filtering will be applied based on the `slug` field.<br><br>\n`Example` in the input box below: `filters[slugtext]=the-ocean`.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "the-ocean"
        }
      },
      "FiltersVisibleParam": {
        "name": "filters[visible]",
        "in": "query",
        "description": "Filter that allows narrowing the search to pictures based on the `visible` column.<br>\nThis boolean filter returns only pictures where the `visible` column is set to `true` or `false`, depending on the value assigned.<br>\nIf this query is absent, no filtering will be applied based on the `visible` column.\n",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "FiltersCategoriesParam": {
        "name": "filters[categories]",
        "in": "query",
        "description": "Filter pictures based on one or more `categories`.<br> \nThe search can be adjusted using `or`/`and` logic to find pictures linked to any or all specified categories, respectively.<br>\nUse a comma-separated list of category IDs prefixed by `or` or `and` to define how the pictures should match the categories.<br>\nIf this query is absent, no filtering will be applied based on the `categories`.<br><br>\n`Example` in the input box below: `filters[categories]=or,1,2,3`.\n",
        "required": false,
        "schema": {
          "type": "string",
          "pattern": "^(or|and),(\\d+)(,\\d+)*$",
          "example": "or,1,2,3"
        }
      },
      "FiltersPublisherParamForFamilyPictures": {
        "name": "filters[publisher]",
        "in": "query",
        "description": "Filter that restricts the search based on the `Publisher's ID`.<br> \nThis parameter allows to narrow the search to `pictures` owned by a specific `Publisher`.<br>\nIf this query is absent, no filtering will be applied based on the `Publisher ID`.\n",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "FiltersPublisherParamForFamilyCategories": {
        "name": "filters[publisher]",
        "in": "query",
        "description": "Filter that restricts the search based on the `Publisher's ID`.<br>\nIn the context of `categories`, the `filters[publisher]` parameter combines with the `filters[used]` parameter to restrict the search to categories that are either:<br><br>\n\n- **Referenced** by at least one of the Publisher's pictures (`filters[used]=true` by default).<br><br>\n- **Not referenced** by any of the Publisher's pictures (`filters[used]=false`).<br><br>\n\nThis enables more focused management of categories based on their usage and association with specific publishers.<br>\nIf this query is absent, no filtering will be applied based on the `Publisher ID`.\n",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "FiltersUsedParam": {
        "name": "filters[used]",
        "in": "query",
        "description": "The `used` filter is designed to refine the search for `categories` based on their active usage.<br> \nIt is a versatile and valuable parameter in both administrative and publishing contexts, adapting its behavior and default value according to the specific route:<br><br>\n\n- In the context of `/private/publisher/categories` route, it enables narrowing the search to only those `categories` that are:<br><br>\n  - **referenced** by at least one of the current Publisher's pictures:<br> (`/private/publisher/categories?filters[used]=true`)<br><br>\n  - **not referenced** by any of the current Publisher's pictures:<br> (`/private/publisher/categories?filters[used]=false`)<br><br><br>\n\n- In the context of `/private/admin/categories` route, it facilitates the search for only those `categories` that are:<br><br>\n  - **referenced** by at least one of the pictures owned by the `Publisher` specified by the `publisher` filter:<br> (`/private/admin/categories?filters[used]=true&filters[publisher]=\"publisherId\"`)<br><br>\n  - **referenced** by at least one of the pictures across the entire database, in the absence of the `publisher` filter:<br> (`/private/admin/categories?filters[used]=true`)<br><br>\n  - **not referenced** by any of the pictures owned by the `Publisher` specified by the `publisher` filter:<br> (`/private/admin/categories?filters[used]=false&filters[publisher]=\"publisherId\"`)<br><br>\n  - **not referenced** by any of the pictures across the entire database, in the absence of the `publisher` filter:<br> (`/private/admin/categories?filters[used]=false`)<br><br><br>\n\nIn the route `/private/admin/categories`, with the usage of `publisher` filter (`/private/admin/categories?filters[publisher]=\"publisherId\"`), the filter `used` has a default value that is set to `true`.<br>\nIn all other contexts, the `used` filter does not have a default value.\n",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "FiltersAdminParam": {
        "name": "filters[admin]",
        "in": "query",
        "description": "A filter that restricts the search of `categories` to only those related to the specified `Admin`, specifically those whose `ownerId` column value matches the filter value.<br> \nIf the `filters[admin]` parameter is absent, no filter is applied to the `ownerId` column.\n",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "IncludePicturesParam": {
        "name": "include[pictures]",
        "in": "query",
        "description": "Parameter to specify the level of detail for `pictures` associated with the returned [`publisher` / `publishers`].<br>\nIf set to `none` (default), no information about `pictures` will be included.<br>\nIf set to `count`, the total number of `pictures` owned by [the `Publisher` / each `Publisher`] will be returned.<br>\nIf set to `basic`, basic information about each picture owned by the `Publisher` will be included, excluding related `categories`.<br>\nIf set to `complete`, complete information about each picture, including all related `categories` details, will be returned.<br>\nFor `basic` and `complete` values, `pictures` with restricted access properties will report minimal details.\n",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "none",
            "count",
            "basic",
            "complete"
          ],
          "default": "none"
        }
      },
      "IncludeCategoriesParam": {
        "name": "include[categories]",
        "in": "query",
        "description": "Parameter to specify the level of detail for `categories` connected to the returned [`picture` / `pictures`].<br>\nIf set to `none` (default), no information about `categories` will be included.<br>\nIf set to `count`, the total number of `categories` connected to [the `Picture` / each `Picture`] will be returned.<br>\nIf set to `complete`, complete information about each category will be returned.<br>\n",
        "required": false,
        "schema": {
          "type": "string",
          "enum": [
            "none",
            "count",
            "complete"
          ],
          "default": "none"
        }
      },
      "OptionsEscapeTextParam": {
        "name": "options[escapetext]",
        "in": "query",
        "description": "Enables or disables the sanitization of textual data in the response by escaping `HTML tags` using the `validator` `escape` method.<br>\nIf set to `true`, it sanitizes textual data to prevent HTML injection.<br>\nDefault is `false`.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": false
        }
      },
      "OptionsStrictSearchParam": {
        "name": "options[strictsearch]",
        "in": "query",
        "description": "Controls the inclusion of records and properties based on their accessibility from the current route.<br>\nIf set to `true`, the search excludes records and properties not accessible from the current route, such as `not-visible pictures` for the `guest/pictures` route, and may report some records as `non-existent` if higher-level permissions are required.<br>\nIf set to `false`, it allows retrieval of all records or properties, but provides only partial information for those with restricted visibility, such as the `picture's ID`, `the referring publisher's ID`, and the `visibility` field value for `not-visible pictures`.<br>\nDefault is `true`.\n",
        "required": false,
        "schema": {
          "type": "boolean",
          "default": true
        }
      },
      "PagingCurrentParam": {
        "name": "paging[current]",
        "in": "query",
        "description": "Specifies the `current page` relative to the total number of pages available for the conducted search.<br>\nIf the set value exceeds the total number of pages, it will be set to the `last page`.<br>\nIn case of absence of data (`totalPages` is `0`), the value for `current page` will be `1`.<br>\nDefault is `1`.\n",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 1
        }
      },
      "PagingItemsPerPageParam": {
        "name": "paging[itemsperpage]",
        "in": "query",
        "description": "Specifies the maximum number of records per page returned in the response.<br>\nDefault is `10`.\n",
        "required": false,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "default": 10
        }
      },
      "IdParam": {
        "name": "id",
        "in": "path",
        "description": "The `userId` identifying the searched `user`.",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "int32",
          "minimum": 1
        }
      },
      "QueryParamInfo": {
        "name": "queryparam[info]",
        "in": "query",
        "description": "This parameter enables querying specific information about the supported query parameters on all API routes.<br> Specify the type of query parameter detail you wish to retrieve, such as `filters`, `include`, `options`, `paging`, or `all` for comprehensive information.<br>\n**Note**: This query parameter is designed to provide metadata about other parameters and supports single queries only, aligning with the API's general usage guidelines for query simplicity and clarity.\n",
        "required": true,
        "schema": {
          "type": "string",
          "example": "filters",
          "enum": [
            "filters",
            "include",
            "options",
            "paging",
            "all"
          ]
        }
      },
      "RouteStrictParam": {
        "name": "route[strict]",
        "in": "query",
        "description": "Use this parameter to specify an **exact route path** for retrieving detailed information about that route. It's designed to query data about a specific API endpoint.<br>\n**Note**: Ensure you provide either `route[strict]` or `route[family]`, <u>**not both**</u> at the same time for a valid query. This is because the `route` parameter cannot support `multiKey` parameters (multiple keys simultaneously). For additional details on `multiKey` parameters, refer to the `API_Rules` object within the `/info` endpoint response.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "/guest/users"
        }
      },
      "RouteFamilyParam": {
        "name": "route[family]",
        "in": "query",
        "description": "This parameter targets a **group of related routes**, enabling you to retrieve information across a broader scope. It's ideal for queries that encompass entire segments of user functionalities or route groupings.<br>\n**Note**: Ensure you provide either `route[strict]` or `route[family]`, <u>**not both**</u> at the same time for a valid query. This is because the `route` parameter cannot support `multiKey` parameters (multiple keys simultaneously). For additional details on `multiKey` parameters, refer to the `API_Rules` object within the `/info` endpoint response.\n",
        "required": false,
        "schema": {
          "type": "string",
          "example": "guest"
        }
      },
      "VisibilityParam": {
        "name": "visibility",
        "in": "path",
        "description": "The attribute for the picture's visibility.",
        "required": true,
        "schema": {
          "type": "string",
          "enum": [
            "on",
            "off"
          ]
        }
      }
    },
    "examples": {
      "NewCategoryExample": {
        "value": {
          "name": "Dark Matter",
          "thumb": "gravitationalLensing.jpg"
        }
      },
      "CategoryUpdateExample-1": {
        "value": {
          "disconnect": true
        }
      },
      "CategoryUpdateExample-2": {
        "value": {
          "name": "Planet Jupiter",
          "disconnect": true
        }
      },
      "CategoryUpdateExample-3": {
        "value": {
          "thumb": "bigRedSpot.jpg",
          "disconnect": true
        }
      },
      "CategoryUpdateExample-4": {
        "value": {
          "thumb": "bigRedSpot.jpg"
        }
      },
      "NewPictureExample": {
        "value": {
          "title": "The Tower of Pisa",
          "description": "The Tower of Pisa as a laboratory for physics experiments.",
          "image": "PisaTower.png",
          "categories": [
            5
          ]
        }
      },
      "PictureUpdateExample": {
        "value": {
          "visible": true,
          "categories": []
        }
      },
      "UpdateUserRemovingWebsiteAndThumbExample": {
        "value": {
          "noWebsite": true,
          "noThumb": true
        }
      },
      "UpdateUserChangingNameAndRemovingThumbExample": {
        "value": {
          "name": "Enrico",
          "noThumb": true
        }
      },
      "UpdateUserChangingWebsiteExample": {
        "value": {
          "website": "www.mynewsite.com"
        }
      },
      "UpdateUserChangingThumbAndOtherDataWithWebsiteConflictExample": {
        "value": {
          "name": "Enrico",
          "surname": "Fermi",
          "website": "www.website-versus-noWebsite-where-noWebsite-wins.com",
          "noWebsite": true,
          "thumb": "mynewthumb.jpg"
        }
      },
      "UpdateUserChangingThumbWithConflictExample": {
        "value": {
          "website": "www.mynewsite.com",
          "noThumb": true,
          "thumb": "thumb-versus-noThumb-where-noThumb-wins.jpg"
        }
      },
      "ChangePasswordExample": {
        "value": {
          "password": "Jupiter&4moons",
          "newPassword": "Jupiter&Its4Moons",
          "confirmNew": "Jupiter&Its4Moons"
        }
      },
      "CredentialsExample": {
        "value": {
          "email": "akiacp@blueberry.it",
          "password": "Aki&Blueberry17"
        }
      },
      "RegistrationExample": {
        "value": {
          "name": "galileo",
          "surname": "galilei",
          "email": "eppuesimuove@hotmail.it",
          "password": "Jupiter&4moons",
          "website": "www.jupitersmoons.it"
        }
      },
      "RegistrationWithThumbExample": {
        "value": {
          "name": "albert",
          "surname": "einstein",
          "email": "spacetime@gmail.com",
          "password": "Eequalsmc^2",
          "website": "www.spacetime.de",
          "thumb": "albert.jpg"
        }
      },
      "CheckTokenExample": {
        "value": {
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc0ODM0ODEsImV4cCI6MTcxNzQ4Mzc4MX0.ZGQSO3LoZ22PO7MefZAtYIzk2cEnDaKCb0mu0YDUoYA"
        }
      },
      "adminCategoriesDelete": {
        "value": {
          "success": true,
          "outcome": {
            "category": {
              "id": 7,
              "name": "Dark matter",
              "slug": "dark-matter",
              "thumb": "C1717985694241nzc.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-10T02:14:54.254Z",
              "updatedAt": "2024-06-10T04:21:35.413Z"
            }
          }
        }
      },
      "adminCategoriesIndexAdminQuery": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 3,
                "name": "Jupiter",
                "slug": "jupiter",
                "thumb": "C1717491493433toj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:13.446Z",
                "updatedAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "slug": "the-ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z",
                "updatedAt": "2024-06-04T08:58:37.746Z"
              },
              {
                "id": 5,
                "name": "Colors",
                "slug": "colors",
                "thumb": "C1717491535007axj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:55.018Z",
                "updatedAt": "2024-06-04T08:58:55.018Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 3,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "admin": 5
            }
          }
        }
      },
      "adminCategoriesIndexMore-1": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 2,
                "name": "The solar system",
                "slug": "the-solar-system",
                "thumb": "C1717491276927smb.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:36.935Z",
                "updatedAt": "2024-06-04T08:54:36.935Z"
              },
              {
                "id": 3,
                "name": "Jupiter",
                "slug": "jupiter",
                "thumb": "C1717491493433toj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:13.446Z",
                "updatedAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "slug": "the-ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z",
                "updatedAt": "2024-06-04T08:58:37.746Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 3,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "original-filters": {
                "publisher": 3,
                "used": false
              },
              "overridden-filters": {
                "used-by-publisher-3": false
              }
            }
          }
        }
      },
      "adminCategoriesIndexMore-2": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 2,
                "name": "The solar system",
                "slug": "the-solar-system",
                "thumb": "C1717491276927smb.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:36.935Z",
                "updatedAt": "2024-06-04T08:54:36.935Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 1,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "original-filters": {
                "publisher": 3,
                "used": false,
                "admin": 1
              },
              "overridden-filters": {
                "admin": 1,
                "used-by-publisher-3": false
              }
            }
          }
        }
      },
      "adminCategoriesIndexNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 1,
                "name": "Universe",
                "slug": "universe",
                "thumb": "C1717491254638bra.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:14.654Z",
                "updatedAt": "2024-06-04T08:54:14.654Z"
              },
              {
                "id": 2,
                "name": "The solar system",
                "slug": "the-solar-system",
                "thumb": "C1717491276927smb.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:36.935Z",
                "updatedAt": "2024-06-04T08:54:36.935Z"
              },
              {
                "id": 6,
                "name": "Quantum physics",
                "slug": "quantum-physics",
                "thumb": "C1717491586719ubv.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:59:46.725Z",
                "updatedAt": "2024-06-04T08:59:46.725Z"
              },
              {
                "id": 3,
                "name": "Jupiter",
                "slug": "jupiter",
                "thumb": "C1717491493433toj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:13.446Z",
                "updatedAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "slug": "the-ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z",
                "updatedAt": "2024-06-04T08:58:37.746Z"
              },
              {
                "id": 5,
                "name": "Colors",
                "slug": "colors",
                "thumb": "C1717491535007axj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:55.018Z",
                "updatedAt": "2024-06-04T08:58:55.018Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 6,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "adminCategoriesIndexPublisherQuery": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 6,
                "name": "Quantum physics",
                "slug": "quantum-physics",
                "thumb": "C1717491586719ubv.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:59:46.725Z",
                "updatedAt": "2024-06-04T08:59:46.725Z"
              },
              {
                "id": 1,
                "name": "Universe",
                "slug": "universe",
                "thumb": "C1717491254638bra.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:14.654Z",
                "updatedAt": "2024-06-04T08:54:14.654Z"
              },
              {
                "id": 5,
                "name": "Colors",
                "slug": "colors",
                "thumb": "C1717491535007axj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:55.018Z",
                "updatedAt": "2024-06-04T08:58:55.018Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 3,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "original-filters": {
                "publisher": 3
              },
              "overridden-filters": {
                "used-by-publisher-3": true
              }
            }
          }
        }
      },
      "adminCategoriesIndexUsedFalse": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [],
            "pagingInfo": {
              "totalItems": 0,
              "itemsPerPage": 10,
              "totalPages": 0,
              "currentPage": 1
            },
            "filters": {
              "used": false
            }
          }
        }
      },
      "adminCategoriesIndexUsedQuery": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 1,
                "name": "Universe",
                "slug": "universe",
                "thumb": "C1717491254638bra.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:14.654Z",
                "updatedAt": "2024-06-04T08:54:14.654Z"
              },
              {
                "id": 2,
                "name": "The solar system",
                "slug": "the-solar-system",
                "thumb": "C1717491276927smb.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:36.935Z",
                "updatedAt": "2024-06-04T08:54:36.935Z"
              },
              {
                "id": 6,
                "name": "Quantum physics",
                "slug": "quantum-physics",
                "thumb": "C1717491586719ubv.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:59:46.725Z",
                "updatedAt": "2024-06-04T08:59:46.725Z"
              },
              {
                "id": 3,
                "name": "Jupiter",
                "slug": "jupiter",
                "thumb": "C1717491493433toj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:13.446Z",
                "updatedAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "slug": "the-ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z",
                "updatedAt": "2024-06-04T08:58:37.746Z"
              },
              {
                "id": 5,
                "name": "Colors",
                "slug": "colors",
                "thumb": "C1717491535007axj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:55.018Z",
                "updatedAt": "2024-06-04T08:58:55.018Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 6,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "used": true
            }
          }
        }
      },
      "adminCategoriesShow": {
        "value": {
          "success": true,
          "outcome": {
            "category": {
              "id": 5,
              "name": "Colors",
              "slug": "colors",
              "thumb": "C1717491535007axj.jpg",
              "ownerId": 5,
              "createdAt": "2024-06-04T08:58:55.018Z",
              "updatedAt": "2024-06-04T08:58:55.018Z"
            }
          }
        }
      },
      "adminCategoriesUpdate-1": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 3,
              "name": "Jupiter",
              "slug": "jupiter",
              "thumb": "C1717491493433toj.jpg",
              "ownerId": 5,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-04T08:58:13.446Z",
              "pictures": [
                {
                  "id": 4
                }
              ]
            },
            "updated": {
              "id": 3,
              "name": "Planet jupiter",
              "slug": "planet-jupiter",
              "thumb": "C1717491493433toj.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:22:59.831Z",
              "pictures": []
            },
            "disconnection": "success"
          }
        }
      },
      "adminCategoriesUpdate-2": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 3,
              "name": "Planet jupiter",
              "slug": "planet-jupiter",
              "thumb": "C1717491493433toj.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:22:59.831Z",
              "pictures": []
            },
            "updated": {
              "id": 3,
              "name": "Jupiter",
              "slug": "jupiter",
              "thumb": "C1717994902227nar.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:48:22.246Z",
              "pictures": []
            }
          }
        }
      },
      "adminCategoriesUpdate-3": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 3,
              "name": "Jupiter",
              "slug": "jupiter",
              "thumb": "C1717994902227nar.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:48:22.246Z",
              "pictures": []
            },
            "updated": {
              "id": 3,
              "name": "Jupiter",
              "slug": "jupiter",
              "thumb": "C1717994902227nar.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:49:47.763Z",
              "pictures": []
            },
            "disconnection": "success"
          }
        }
      },
      "adminCategoriesUpdate-4": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 3,
              "name": "Jupiter",
              "slug": "jupiter",
              "thumb": "C1717994902227nar.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:49:47.763Z",
              "pictures": []
            },
            "updated": {
              "id": 3,
              "name": "Jupiter",
              "slug": "jupiter",
              "thumb": "C1717995277300gkn.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:58:13.446Z",
              "updatedAt": "2024-06-10T04:54:37.324Z",
              "pictures": []
            },
            "disconnection": "not successed"
          }
        }
      },
      "adminPicturesInclude": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 4,
                "title": "Jupiter seen with telescope.",
                "description": "Jupiter & its <4 moons> seen from Earth",
                "image": "P1717492348071bif.jpg",
                "visible": true,
                "ownerId": 2,
                "createdAt": "2024-06-04T09:12:28.091Z",
                "updatedAt": "2024-06-04T09:12:28.091Z",
                "categories": [
                  {
                    "id": 2,
                    "name": "The solar system",
                    "thumb": "C1717491276927smb.jpg"
                  },
                  {
                    "id": 3,
                    "name": "Jupiter",
                    "thumb": "C1717491493433toj.jpg"
                  }
                ]
              },
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "updatedAt": "2024-06-04T09:03:16.864Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 2,
                "title": "Space & Time",
                "description": "Space-Time is flexible",
                "image": "P1717491882233gfh.jpg",
                "visible": false,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:04:42.251Z",
                "updatedAt": "2024-06-04T09:04:42.251Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z",
                "updatedAt": "2024-06-04T09:20:00.868Z",
                "categories": [
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 3,
                "title": "The Moon Road",
                "description": "The moon reflected on the ocean.",
                "image": "P1717492200919iha.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:10:00.936Z",
                "updatedAt": "2024-06-04T09:10:00.936Z",
                "categories": [
                  {
                    "id": 4,
                    "name": "The ocean",
                    "thumb": "C1717491517735ofc.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 5,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "adminPicturesMore-1": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 2,
                "title": "Space & Time",
                "description": "Space-Time is flexible",
                "image": "P1717491882233gfh.jpg",
                "visible": false,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:04:42.251Z",
                "updatedAt": "2024-06-04T09:04:42.251Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 1,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "visible": false,
              "publisher": 3
            }
          }
        }
      },
      "adminPicturesNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 4,
                "title": "Jupiter seen with telescope.",
                "description": "Jupiter & its <4 moons> seen from Earth",
                "image": "P1717492348071bif.jpg",
                "visible": true,
                "ownerId": 2,
                "createdAt": "2024-06-04T09:12:28.091Z",
                "updatedAt": "2024-06-04T09:12:28.091Z"
              },
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "updatedAt": "2024-06-04T09:03:16.864Z"
              },
              {
                "id": 2,
                "title": "Space & Time",
                "description": "Space-Time is flexible",
                "image": "P1717491882233gfh.jpg",
                "visible": false,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:04:42.251Z",
                "updatedAt": "2024-06-04T09:04:42.251Z"
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z",
                "updatedAt": "2024-06-04T09:20:00.868Z"
              },
              {
                "id": 3,
                "title": "The Moon Road",
                "description": "The moon reflected on the ocean.",
                "image": "P1717492200919iha.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:10:00.936Z",
                "updatedAt": "2024-06-04T09:10:00.936Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 5,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "adminPicturesShowInclude": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 2,
              "title": "Space & Time",
              "description": "Space-Time is flexible",
              "image": "P1717491882233gfh.jpg",
              "visible": false,
              "ownerId": 3,
              "createdAt": "2024-06-04T09:04:42.251Z",
              "updatedAt": "2024-06-04T09:04:42.251Z",
              "categories": {
                "count": 2
              }
            }
          }
        }
      },
      "adminPicturesShowNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 2,
              "title": "Space & Time",
              "description": "Space-Time is flexible",
              "image": "P1717491882233gfh.jpg",
              "visible": false,
              "ownerId": 3,
              "createdAt": "2024-06-04T09:04:42.251Z",
              "updatedAt": "2024-06-04T09:04:42.251Z"
            }
          }
        }
      },
      "authLogIn": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": null,
              "website": null,
              "tokenExpAt": "2024-06-04T05:46:40.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-04T05:41:40.397Z"
            },
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc0Nzk3MDAsImV4cCI6MTcxNzQ4MDAwMH0.fjSIblCEuCo5o_TizROEebZW1qlQ0EpLVJUPTXi6wkg"
          }
        }
      },
      "authSignUpLoggedNoThumb": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "name": "Galileo",
              "surname": "Galilei",
              "role": "Publisher",
              "email": "eppuesimuove@hotmail.it",
              "thumb": null,
              "website": "www.jupitersmoons.it",
              "tokenExpAt": "2024-06-04T07:30:49.000Z",
              "createdAt": "2024-06-04T07:25:49.132Z",
              "updatedAt": "2024-06-04T07:25:49.141Z"
            },
            "logged": true,
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwibmFtZSI6IkdhbGlsZW8iLCJzdXJuYW1lIjoiR2FsaWxlaSIsInJvbGUiOiJQdWJsaXNoZXIiLCJlbWFpbCI6ImVwcHVlc2ltdW92ZUBob3RtYWlsLml0IiwiaWF0IjoxNzE3NDg1OTQ5LCJleHAiOjE3MTc0ODYyNDl9.WSWf7g9XI-fVhIo02bljVVWPwMTMc60I_fvnsRaejn4"
          }
        }
      },
      "authSignUpLoggedWithThumb": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 3,
              "name": "Albert",
              "surname": "Einstein",
              "role": "Publisher",
              "email": "spacetime@gmail.com",
              "thumb": "U1717486321070zjz.jpg",
              "website": "www.spacetime.de",
              "tokenExpAt": "2024-06-04T07:37:01.000Z",
              "createdAt": "2024-06-04T07:32:01.178Z",
              "updatedAt": "2024-06-04T07:32:01.185Z"
            },
            "logged": true,
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MywibmFtZSI6IkFsYmVydCIsInN1cm5hbWUiOiJFaW5zdGVpbiIsInJvbGUiOiJQdWJsaXNoZXIiLCJlbWFpbCI6InNwYWNldGltZUBnbWFpbC5jb20iLCJpYXQiOjE3MTc0ODYzMjEsImV4cCI6MTcxNzQ4NjYyMX0.X6icE3abhnHabNLI-6_MIKwfqfVozMfPUOmgaDZ6afc"
          }
        }
      },
      "authSignUpUnlogged": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 4,
              "name": "Isaac",
              "surname": "Newton",
              "role": "Publisher",
              "email": "fallingapples@yahoo.uk",
              "thumb": "U1717486484327erm.jpg",
              "website": "www.fallingapples.uk",
              "tokenExpAt": null,
              "createdAt": "2024-06-04T07:34:44.432Z",
              "updatedAt": "2024-06-04T07:34:44.442Z"
            },
            "logged": false
          }
        }
      },
      "authTokenChecked": {
        "value": {
          "success": true,
          "outcome": {
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc0ODM0ODEsImV4cCI6MTcxNzQ4Mzc4MX0.ZGQSO3LoZ22PO7MefZAtYIzk2cEnDaKCb0mu0YDUoYA",
            "payload": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "iat": 1717483481,
              "exp": 1717483781
            }
          }
        }
      },
      "authUnlogged": {
        "value": {
          "success": true,
          "outcome": {
            "unlogged": 1
          }
        }
      },
      "changeVisibility": {
        "value": {
          "success": true,
          "outcome": {}
        }
      },
      "guestCategories1": {
        "value": {
          "success": true,
          "outcome": {
            "category": {
              "id": 1,
              "name": "Universe",
              "thumb": "C1717491254638bra.jpg",
              "createdAt": "2024-06-04T08:54:14.654Z"
            }
          }
        }
      },
      "guestCategoriesMore": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 4,
                "name": "The ocean",
                "thumb": "C1717491517735ofc.jpg",
                "createdAt": "2024-06-04T08:58:37.746Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 1,
              "totalPages": 2,
              "currentPage": 1
            },
            "filters": {
              "slugtext": "the-"
            }
          }
        }
      },
      "guestCategoriesNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 5,
                "name": "Colors",
                "thumb": "C1717491535007axj.jpg",
                "createdAt": "2024-06-04T08:58:55.018Z"
              },
              {
                "id": 3,
                "name": "Jupiter",
                "thumb": "C1717491493433toj.jpg",
                "createdAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 6,
                "name": "Quantum physics",
                "thumb": "C1717491586719ubv.jpg",
                "createdAt": "2024-06-04T08:59:46.725Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "thumb": "C1717491517735ofc.jpg",
                "createdAt": "2024-06-04T08:58:37.746Z"
              },
              {
                "id": 2,
                "name": "The solar system",
                "thumb": "C1717491276927smb.jpg",
                "createdAt": "2024-06-04T08:54:36.935Z"
              },
              {
                "id": 1,
                "name": "Universe",
                "thumb": "C1717491254638bra.jpg",
                "createdAt": "2024-06-04T08:54:14.654Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 6,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "guestCategoriesSlugTextNoDash": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 5,
                "name": "Colors",
                "thumb": "C1717491535007axj.jpg",
                "createdAt": "2024-06-04T08:58:55.018Z"
              },
              {
                "id": 3,
                "name": "Jupiter",
                "thumb": "C1717491493433toj.jpg",
                "createdAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 2,
                "name": "The solar system",
                "thumb": "C1717491276927smb.jpg",
                "createdAt": "2024-06-04T08:54:36.935Z"
              },
              {
                "id": 1,
                "name": "Universe",
                "thumb": "C1717491254638bra.jpg",
                "createdAt": "2024-06-04T08:54:14.654Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 4,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "slugtext": "r"
            }
          }
        }
      },
      "guestCategoriesSlugTextWithDash": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 2,
                "name": "The solar system",
                "thumb": "C1717491276927smb.jpg",
                "createdAt": "2024-06-04T08:54:36.935Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 1,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "slugtext": "r-"
            }
          }
        }
      },
      "guestPictures1Include": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 1,
              "title": "The speed of <light>",
              "description": "The speed of light is the highest speed possible into the universe.",
              "image": "P1717491796843rne.png",
              "visible": true,
              "ownerId": 3,
              "createdAt": "2024-06-04T09:03:16.864Z",
              "categories": [
                {
                  "id": 1,
                  "name": "Universe",
                  "thumb": "C1717491254638bra.jpg"
                },
                {
                  "id": 5,
                  "name": "Colors",
                  "thumb": "C1717491535007axj.jpg"
                },
                {
                  "id": 6,
                  "name": "Quantum physics",
                  "thumb": "C1717491586719ubv.jpg"
                }
              ]
            }
          }
        }
      },
      "guestPictures1NoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 1,
              "title": "The speed of <light>",
              "description": "The speed of light is the highest speed possible into the universe.",
              "image": "P1717491796843rne.png",
              "visible": true,
              "ownerId": 3,
              "createdAt": "2024-06-04T09:03:16.864Z"
            }
          }
        }
      },
      "guestPictures2StrictFalse": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 2,
              "visible": false,
              "ownerId": 3
            }
          }
        }
      },
      "guestPicturesMore": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 2,
                "visible": false,
                "ownerId": 3
              },
              {
                "id": 1,
                "title": "The speed of &lt;light&gt;",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "publisher": 3
            }
          }
        }
      },
      "guestPicturesMoreNoResults": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [],
            "pagingInfo": {
              "totalItems": 0,
              "itemsPerPage": 10,
              "totalPages": 0,
              "currentPage": 1
            },
            "filters": {
              "categories": {
                "operator": "and",
                "ids": [
                  5,
                  6,
                  3
                ]
              }
            }
          }
        }
      },
      "guestPicturesMoreWithAND": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z",
                "categories": [
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "categories": {
                "operator": "and",
                "ids": [
                  5,
                  6
                ]
              }
            }
          }
        }
      },
      "guestPicturesMoreWithOR": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 2,
                "visible": false,
                "ownerId": 3
              },
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z",
                "categories": [
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 3,
                "title": "The Moon Road",
                "description": "The moon reflected on the ocean.",
                "image": "P1717492200919iha.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:10:00.936Z",
                "categories": [
                  {
                    "id": 4,
                    "name": "The ocean",
                    "thumb": "C1717491517735ofc.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 4,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "categories": {
                "operator": "or",
                "ids": [
                  5,
                  6
                ]
              }
            }
          }
        }
      },
      "guestPicturesMoreWithORStrictDefault": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z",
                "categories": [
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              },
              {
                "id": 3,
                "title": "The Moon Road",
                "description": "The moon reflected on the ocean.",
                "image": "P1717492200919iha.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:10:00.936Z",
                "categories": [
                  {
                    "id": 4,
                    "name": "The ocean",
                    "thumb": "C1717491517735ofc.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 3,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "categories": {
                "operator": "or",
                "ids": [
                  5,
                  6
                ]
              }
            }
          }
        }
      },
      "guestPicturesNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 4,
                "title": "Jupiter seen with telescope.",
                "description": "Jupiter & its <4 moons> seen from Earth",
                "image": "P1717492348071bif.jpg",
                "visible": true,
                "ownerId": 2,
                "createdAt": "2024-06-04T09:12:28.091Z"
              },
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z"
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z"
              },
              {
                "id": 3,
                "title": "The Moon Road",
                "description": "The moon reflected on the ocean.",
                "image": "P1717492200919iha.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:10:00.936Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 4,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "guestPicturesStrictFalse": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 4,
                "title": "Jupiter seen with telescope.",
                "description": "Jupiter & its <4 moons> seen from Earth",
                "image": "P1717492348071bif.jpg",
                "visible": true,
                "ownerId": 2,
                "createdAt": "2024-06-04T09:12:28.091Z"
              },
              {
                "id": 2,
                "visible": false,
                "ownerId": 3
              },
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "ownerId": 3,
                "createdAt": "2024-06-04T09:03:16.864Z"
              },
              {
                "id": 5,
                "title": "How prismas \"play\" with the light.",
                "description": null,
                "image": "P1717492800849gqs.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:20:00.868Z"
              },
              {
                "id": 3,
                "title": "The Moon Road",
                "description": "The moon reflected on the ocean.",
                "image": "P1717492200919iha.jpg",
                "visible": true,
                "ownerId": 4,
                "createdAt": "2024-06-04T09:10:00.936Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 5,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "guestUsers2EscapeDefault": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "name": "Galileo",
              "surname": "Galilei",
              "role": "Publisher",
              "thumb": null,
              "website": "www.jupitersmoons.it",
              "createdAt": "2024-06-04T07:25:49.132Z",
              "pictures": [
                {
                  "id": 4,
                  "title": "Jupiter seen with telescope.",
                  "description": "Jupiter & its <4 moons> seen from Earth",
                  "image": "P1717492348071bif.jpg",
                  "visible": true,
                  "categories": [
                    {
                      "id": 2,
                      "name": "The solar system",
                      "thumb": "C1717491276927smb.jpg"
                    },
                    {
                      "id": 3,
                      "name": "Jupiter",
                      "thumb": "C1717491493433toj.jpg"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "guestUsers2EscapeTrue": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "name": "Galileo",
              "surname": "Galilei",
              "role": "Publisher",
              "thumb": null,
              "website": "www.jupitersmoons.it",
              "createdAt": "2024-06-04T07:25:49.132Z",
              "pictures": [
                {
                  "id": 4,
                  "title": "Jupiter seen with telescope.",
                  "description": "Jupiter &amp; its &lt;4 moons&gt; seen from Earth",
                  "image": "P1717492348071bif.jpg",
                  "visible": true,
                  "categories": [
                    {
                      "id": 2,
                      "name": "The solar system",
                      "thumb": "C1717491276927smb.jpg"
                    },
                    {
                      "id": 3,
                      "name": "Jupiter",
                      "thumb": "C1717491493433toj.jpg"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "guestUsers2NoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "name": "Galileo",
              "surname": "Galilei",
              "role": "Publisher",
              "thumb": null,
              "website": "www.jupitersmoons.it",
              "createdAt": "2024-06-04T07:25:49.132Z"
            }
          }
        }
      },
      "guestUsersMoreStrictDefault": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 3,
                "name": "Albert",
                "surname": "Einstein",
                "role": "Publisher",
                "thumb": "U1717486321070zjz.jpg",
                "website": "www.spacetime.de",
                "createdAt": "2024-06-04T07:32:01.178Z",
                "pictures": [
                  {
                    "id": 1,
                    "title": "The speed of <light>",
                    "description": "The speed of light is the highest speed possible into the universe.",
                    "image": "P1717491796843rne.png",
                    "visible": true
                  },
                  {
                    "id": 2,
                    "visible": false
                  }
                ]
              },
              {
                "id": 4,
                "name": "Isaac",
                "surname": "Newton",
                "role": "Publisher",
                "thumb": "U1717486484327erm.jpg",
                "website": "www.fallingapples.uk",
                "createdAt": "2024-06-04T07:34:44.432Z",
                "pictures": [
                  {
                    "id": 3,
                    "title": "The Moon Road",
                    "description": "The moon reflected on the ocean.",
                    "image": "P1717492200919iha.jpg",
                    "visible": true
                  },
                  {
                    "id": 5,
                    "title": "How prismas \"play\" with the light.",
                    "description": null,
                    "image": "P1717492800849gqs.jpg",
                    "visible": true
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "thumb": true
            }
          }
        }
      },
      "guestUsersMoreStrictFalse": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 5,
                "role": "Admin"
              },
              {
                "id": 3,
                "name": "Albert",
                "surname": "Einstein",
                "role": "Publisher",
                "thumb": "U1717486321070zjz.jpg",
                "website": "www.spacetime.de",
                "createdAt": "2024-06-04T07:32:01.178Z",
                "pictures": [
                  {
                    "id": 1,
                    "title": "The speed of <light>",
                    "description": "The speed of light is the highest speed possible into the universe.",
                    "image": "P1717491796843rne.png",
                    "visible": true,
                    "categories": [
                      {
                        "id": 1,
                        "name": "Universe",
                        "thumb": "C1717491254638bra.jpg"
                      },
                      {
                        "id": 5,
                        "name": "Colors",
                        "thumb": "C1717491535007axj.jpg"
                      },
                      {
                        "id": 6,
                        "name": "Quantum physics",
                        "thumb": "C1717491586719ubv.jpg"
                      }
                    ]
                  },
                  {
                    "id": 2,
                    "visible": false
                  }
                ]
              },
              {
                "id": 4,
                "name": "Isaac",
                "surname": "Newton",
                "role": "Publisher",
                "thumb": "U1717486484327erm.jpg",
                "website": "www.fallingapples.uk",
                "createdAt": "2024-06-04T07:34:44.432Z",
                "pictures": [
                  {
                    "id": 3,
                    "title": "The Moon Road",
                    "description": "The moon reflected on the ocean.",
                    "image": "P1717492200919iha.jpg",
                    "visible": true,
                    "categories": [
                      {
                        "id": 4,
                        "name": "The ocean",
                        "thumb": "C1717491517735ofc.jpg"
                      },
                      {
                        "id": 5,
                        "name": "Colors",
                        "thumb": "C1717491535007axj.jpg"
                      }
                    ]
                  },
                  {
                    "id": 5,
                    "title": "How prismas \"play\" with the light.",
                    "description": null,
                    "image": "P1717492800849gqs.jpg",
                    "visible": true,
                    "categories": [
                      {
                        "id": 5,
                        "name": "Colors",
                        "thumb": "C1717491535007axj.jpg"
                      },
                      {
                        "id": 6,
                        "name": "Quantum physics",
                        "thumb": "C1717491586719ubv.jpg"
                      }
                    ]
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 3,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "thumb": true
            }
          }
        }
      },
      "guestUsersNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 3,
                "name": "Albert",
                "surname": "Einstein",
                "role": "Publisher",
                "thumb": "U1717486321070zjz.jpg",
                "website": "www.spacetime.de",
                "createdAt": "2024-06-04T07:32:01.178Z"
              },
              {
                "id": 2,
                "name": "Galileo",
                "surname": "Galilei",
                "role": "Publisher",
                "thumb": null,
                "website": "www.jupitersmoons.it",
                "createdAt": "2024-06-04T07:25:49.132Z"
              },
              {
                "id": 4,
                "name": "Isaac",
                "surname": "Newton",
                "role": "Publisher",
                "thumb": "U1717486484327erm.jpg",
                "website": "www.fallingapples.uk",
                "createdAt": "2024-06-04T07:34:44.432Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 3,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "guestUsersStrictFalse": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 1,
                "role": "Admin"
              },
              {
                "id": 5,
                "role": "Admin"
              },
              {
                "id": 3,
                "name": "Albert",
                "surname": "Einstein",
                "role": "Publisher",
                "thumb": "U1717486321070zjz.jpg",
                "website": "www.spacetime.de",
                "createdAt": "2024-06-04T07:32:01.178Z"
              },
              {
                "id": 2,
                "name": "Galileo",
                "surname": "Galilei",
                "role": "Publisher",
                "thumb": null,
                "website": "www.jupitersmoons.it",
                "createdAt": "2024-06-04T07:25:49.132Z"
              },
              {
                "id": 4,
                "name": "Isaac",
                "surname": "Newton",
                "role": "Publisher",
                "thumb": "U1717486484327erm.jpg",
                "website": "www.fallingapples.uk",
                "createdAt": "2024-06-04T07:34:44.432Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 5,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "homeInfo": {
        "value": {
          "success": true,
          "outcome": {
            "Project": {
              "API": "Pics Harbour",
              "version": "1.0.0",
              "description": "BackEnd (API) written in Node JS, related to the project Pics Harbour (Local)",
              "author": "Michele Franciolapilla"
            },
            "Info": "route: '/info'"
          }
        }
      },
      "infoApiQueriesInclude": {
        "value": {
          "success": true,
          "outcome": {
            "responseData": {
              "requestedInfo": {
                "queryParam-info": "include"
              },
              "data": [
                {
                  "label": "Include",
                  "location": "query",
                  "required": false,
                  "multiKey": true,
                  "syntax": "include[key]=value",
                  "notation": "bracket",
                  "case": "insensitive",
                  "info": "The `include` query parameter allows including extra information related to the requested records in the response on `/ (GET)` and `/:id (GET)` routes.",
                  "keysAndValues": [
                    {
                      "key": "pictures",
                      "required": false,
                      "values": {
                        "allowed": [
                          "none",
                          "count",
                          "basic",
                          "complete"
                        ]
                      },
                      "default": "none",
                      "details": [
                        "If set to `none` (`default`) doesn't include any information about `pictures` owned by the returned `publishers`.",
                        "If set to `count` returns the total number of `pictures` owned by each returned `publisher`.",
                        "If set to `basic` returns the information about each `picture` owned by the returned `publisher`, excluding the related `categories`.",
                        "If set to `complete` returns the complete information about each `picture`, including all related `categories` details.",
                        "For the values `basic` and `complete`, the `pictures` with restricted access properties only report the minimal details."
                      ],
                      "availableOn": [
                        {
                          "route": "/guest/users",
                          "endPoint": [
                            "/",
                            "/:id"
                          ],
                          "method": "GET"
                        },
                        {
                          "route": "/private/users",
                          "endPoint": [
                            "/",
                            "/:id"
                          ],
                          "method": "GET"
                        }
                      ]
                    },
                    {
                      "key": "categories",
                      "required": false,
                      "values": {
                        "allowed": [
                          "none",
                          "count",
                          "complete"
                        ]
                      },
                      "default": "none",
                      "details": [
                        "If set to `none` (`default`) doesn't include any information about `categories` related to the returned `pictures`.",
                        "If set to `count` returns the total number of `categories` referred to by each returned `picture`.",
                        "If set to `complete` returns the complete information about each `category` referred to by each returned `picture`."
                      ],
                      "availableOn": [
                        {
                          "route": "/guest/pictures",
                          "endPoint": [
                            "/",
                            "/:id"
                          ],
                          "method": "GET"
                        },
                        {
                          "route": "/private/publisher/pictures",
                          "endPoint": [
                            "/",
                            "/:id"
                          ],
                          "method": "GET"
                        },
                        {
                          "route": "/private/admin/pictures",
                          "endPoint": [
                            "/",
                            "/:id"
                          ],
                          "method": "GET"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "infoApiRoutesStrictGuestCategories": {
        "value": {
          "success": true,
          "outcome": {
            "responseData": {
              "requestedInfo": {
                "strict": "/guest/categories"
              },
              "data": [
                {
                  "label": "Public Categories",
                  "path": "/guest/categories",
                  "info": "Access to categories data (read only)",
                  "routes": [
                    {
                      "label": "Allowed Queries",
                      "endPoint": "/allowedQueries",
                      "method": "GET",
                      "access": "Authorization is not required.",
                      "info": "Returns all the queries (bracket notation) allowed for the `GET` routes",
                      "details": [],
                      "data": {
                        "headers": [],
                        "body": [],
                        "params": [],
                        "query": []
                      },
                      "returns": {
                        "status": 200,
                        "type": "json",
                        "format": {
                          "success": true,
                          "outcome": {
                            "filtersQueries": "(array of objects)",
                            "pagingQueries": "(array of objects)"
                          }
                        }
                      }
                    },
                    {
                      "label": "Categories List",
                      "endPoint": "/",
                      "method": "GET",
                      "access": "Authorization is not required.",
                      "info": "Returns the list of all categories. Accepts `filters` and `paging parameters` in the query",
                      "details": [],
                      "data": {
                        "headers": [],
                        "body": [],
                        "params": [],
                        "query": [
                          {
                            "key": "filters",
                            "type": "bracket notation",
                            "required": false,
                            "pattern": "filters[(queryKey)]=(queryValue)"
                          },
                          {
                            "key": "paging",
                            "type": "bracket notation",
                            "required": false,
                            "pattern": "paging[(queryKey)]=(queryValue)"
                          }
                        ]
                      },
                      "returns": {
                        "success": {
                          "status": 200,
                          "type": "json",
                          "format": {
                            "success": true,
                            "outcome": {
                              "categories": "(array of objects)",
                              "pagingInfo": "(object)",
                              "filters": "(object)"
                            }
                          }
                        },
                        "failure": "(see 'failureObject')"
                      }
                    },
                    {
                      "label": "Category data",
                      "endPoint": "/:id",
                      "method": "GET",
                      "access": "Authorization is not required.",
                      "info": "Returns some data of the specified category.",
                      "details": [],
                      "data": {
                        "headers": [],
                        "body": [],
                        "params": [
                          {
                            "param": "id",
                            "required": true,
                            "pattern": {
                              "number": [
                                "int",
                                "positive",
                                "not zero"
                              ]
                            }
                          }
                        ],
                        "query": []
                      },
                      "returns": {
                        "success": {
                          "status": 200,
                          "type": "json",
                          "format": {
                            "success": true,
                            "outcome": {
                              "category": "(object)"
                            }
                          }
                        },
                        "failure": "(see 'failureObject')"
                      }
                    }
                  ]
                }
              ]
            },
            "extraData": []
          }
        }
      },
      "privateAdminCategoriesStore": {
        "value": {
          "success": true,
          "outcome": {
            "category": {
              "id": 7,
              "name": "Dark matter",
              "slug": "dark-matter",
              "thumb": "C1717985694241nzc.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-10T02:14:54.254Z",
              "updatedAt": "2024-06-10T02:14:54.254Z"
            }
          }
        }
      },
      "privatePublisher-3-PicturesEscapeTextTrue": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 1,
                "title": "The speed of &lt;light&gt;",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "updatedAt": "2024-06-04T09:03:16.864Z"
              },
              {
                "id": 2,
                "title": "Space &amp; Time",
                "description": "Space-Time is flexible",
                "image": "P1717491882233gfh.jpg",
                "visible": false,
                "createdAt": "2024-06-04T09:04:42.251Z",
                "updatedAt": "2024-06-04T09:04:42.251Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "privatePublisher-3-PicturesMany": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "updatedAt": "2024-06-04T09:03:16.864Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 5,
                    "name": "Colors",
                    "thumb": "C1717491535007axj.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 1,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "visible": true,
              "categories": {
                "operator": "or",
                "ids": [
                  6,
                  7
                ]
              }
            }
          }
        }
      },
      "privatePublisher-3-PicturesMore": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 2,
                "title": "Space & Time",
                "description": "Space-Time is flexible",
                "image": "P1717491882233gfh.jpg",
                "visible": false,
                "createdAt": "2024-06-04T09:04:42.251Z",
                "updatedAt": "2024-06-04T09:04:42.251Z",
                "categories": [
                  {
                    "id": 1,
                    "name": "Universe",
                    "thumb": "C1717491254638bra.jpg"
                  },
                  {
                    "id": 6,
                    "name": "Quantum physics",
                    "thumb": "C1717491586719ubv.jpg"
                  }
                ]
              }
            ],
            "pagingInfo": {
              "totalItems": 1,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "visible": false
            }
          }
        }
      },
      "privatePublisher-3-PicturesNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [
              {
                "id": 1,
                "title": "The speed of <light>",
                "description": "The speed of light is the highest speed possible into the universe.",
                "image": "P1717491796843rne.png",
                "visible": true,
                "createdAt": "2024-06-04T09:03:16.864Z",
                "updatedAt": "2024-06-04T09:03:16.864Z"
              },
              {
                "id": 2,
                "title": "Space & Time",
                "description": "Space-Time is flexible",
                "image": "P1717491882233gfh.jpg",
                "visible": false,
                "createdAt": "2024-06-04T09:04:42.251Z",
                "updatedAt": "2024-06-04T09:04:42.251Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "privatePublisher-3-PicturesNoResults": {
        "value": {
          "success": true,
          "outcome": {
            "pictures": [],
            "pagingInfo": {
              "totalItems": 0,
              "itemsPerPage": 10,
              "totalPages": 0,
              "currentPage": 1
            },
            "filters": {
              "visible": true,
              "categories": {
                "operator": "or",
                "ids": [
                  6,
                  7
                ]
              },
              "titletext": "moon"
            }
          }
        }
      },
      "privatePublisherPictures7Update-1": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 7,
              "title": "The Tower of Pisa",
              "description": "The Tower of Pisa as a laboratory for physics experiments.",
              "image": "P1717633678997kfw.png",
              "visible": false,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:32:15.262Z",
              "categories": [
                {
                  "id": 5
                }
              ]
            },
            "updated": {
              "id": 7,
              "title": "The Tower of Pisa",
              "description": "The Tower of Pisa as a laboratory for physics experiments.",
              "image": "P1717633678997kfw.png",
              "visible": true,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:37:13.800Z",
              "categories": [
                {
                  "id": 5
                }
              ]
            }
          }
        }
      },
      "privatePublisherPictures7Update-2": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 7,
              "title": "The Tower of Pisa",
              "description": "The Tower of Pisa as a laboratory for physics experiments.",
              "image": "P1717633678997kfw.png",
              "visible": true,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:37:13.800Z",
              "categories": [
                {
                  "id": 5
                }
              ]
            },
            "updated": {
              "id": 7,
              "title": "The new title for <Tower of Pisa>",
              "description": "A new description",
              "image": "P1717633678997kfw.png",
              "visible": true,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:45:20.484Z",
              "categories": []
            }
          }
        }
      },
      "privatePublisherPictures7Update-3": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 7,
              "title": "The new title for <Tower of Pisa>",
              "description": "A new description",
              "image": "P1717633678997kfw.png",
              "visible": true,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:45:20.484Z",
              "categories": []
            },
            "updated": {
              "id": 7,
              "title": "The Tower of Pisa",
              "description": "The Tower of Pisa as a laboratory for physics experiments.",
              "image": "P1717633678997kfw.png",
              "visible": false,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:50:17.566Z",
              "categories": [
                {
                  "id": 5
                }
              ]
            }
          }
        }
      },
      "privatePublisherPicturesStore": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 7,
              "title": "The Tower of Pisa",
              "description": "The Tower of Pisa as a laboratory for physics experiments.",
              "image": "P1717633678997kfw.png",
              "visible": false,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T00:27:59.013Z",
              "categories": [
                {
                  "id": 5
                }
              ]
            }
          }
        }
      },
      "privateUsers1NoQueryByAdmin": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": null,
              "website": null,
              "createdAt": "2024-06-04T05:39:13.774Z"
            }
          }
        }
      },
      "privateUsers1NoQueryByPublisher": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": null,
              "website": null,
              "createdAt": "2024-06-04T05:39:13.774Z"
            }
          }
        }
      },
      "privateUsers2NoQueryByAdmin": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "name": "Galileo",
              "surname": "Galilei",
              "role": "Publisher",
              "email": "eppuesimuove@hotmail.it",
              "thumb": null,
              "website": "www.jupitersmoons.it",
              "createdAt": "2024-06-04T07:25:49.132Z"
            }
          }
        }
      },
      "privateUsers2NoQueryByPublisherSelf": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "name": "Galileo",
              "surname": "Galilei",
              "role": "Publisher",
              "email": "eppuesimuove@hotmail.it",
              "thumb": null,
              "website": "www.jupitersmoons.it",
              "createdAt": "2024-06-04T07:25:49.132Z"
            }
          }
        }
      },
      "privateUsers2StrictFalseByPublisher": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 2,
              "role": "Publisher"
            }
          }
        }
      },
      "privateUsersByPublisherStrictFalse": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 1,
                "name": "Aki",
                "surname": "Blueberry",
                "role": "Admin",
                "email": "akiacp@blueberry.it",
                "thumb": null,
                "website": null,
                "createdAt": "2024-06-04T05:39:13.774Z"
              },
              {
                "id": 5,
                "name": "Aura",
                "surname": "Bright",
                "role": "Admin",
                "email": "aura@gmail.com",
                "thumb": "U1717489973146lhi.jpg",
                "website": "http://bright-heaven.it",
                "createdAt": "2024-06-04T08:32:53.270Z"
              },
              {
                "id": 3,
                "name": "Albert",
                "surname": "Einstein",
                "role": "Publisher",
                "email": "spacetime@gmail.com",
                "thumb": "U1717486321070zjz.jpg",
                "website": "www.spacetime.de",
                "createdAt": "2024-06-04T07:32:01.178Z"
              },
              {
                "id": 2,
                "role": "Publisher"
              },
              {
                "id": 4,
                "role": "Publisher"
              }
            ],
            "pagingInfo": {
              "totalItems": 5,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "privateUsersNoQueryByAdmin": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 1,
                "name": "Aki",
                "surname": "Blueberry",
                "role": "Admin",
                "email": "akiacp@blueberry.it",
                "thumb": null,
                "website": null,
                "createdAt": "2024-06-04T05:39:13.774Z"
              },
              {
                "id": 5,
                "name": "Aura",
                "surname": "Bright",
                "role": "Admin",
                "email": "aura@gmail.com",
                "thumb": "U1717489973146lhi.jpg",
                "website": "http://bright-heaven.it",
                "createdAt": "2024-06-04T08:32:53.270Z"
              },
              {
                "id": 3,
                "name": "Albert",
                "surname": "Einstein",
                "role": "Publisher",
                "email": "spacetime@gmail.com",
                "thumb": "U1717486321070zjz.jpg",
                "website": "www.spacetime.de",
                "createdAt": "2024-06-04T07:32:01.178Z"
              },
              {
                "id": 2,
                "name": "Galileo",
                "surname": "Galilei",
                "role": "Publisher",
                "email": "eppuesimuove@hotmail.it",
                "thumb": null,
                "website": "www.jupitersmoons.it",
                "createdAt": "2024-06-04T07:25:49.132Z"
              },
              {
                "id": 4,
                "name": "Isaac",
                "surname": "Newton",
                "role": "Publisher",
                "email": "fallingapples@yahoo.uk",
                "thumb": "U1717486484327erm.jpg",
                "website": "www.fallingapples.uk",
                "createdAt": "2024-06-04T07:34:44.432Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 5,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "privateUsersNoQueryByPublisherStrictDefault": {
        "value": {
          "success": true,
          "outcome": {
            "users": [
              {
                "id": 1,
                "name": "Aki",
                "surname": "Blueberry",
                "role": "Admin",
                "email": "akiacp@blueberry.it",
                "thumb": null,
                "website": null,
                "createdAt": "2024-06-04T05:39:13.774Z"
              },
              {
                "id": 5,
                "name": "Aura",
                "surname": "Bright",
                "role": "Admin",
                "email": "aura@gmail.com",
                "thumb": "U1717489973146lhi.jpg",
                "website": "http://bright-heaven.it",
                "createdAt": "2024-06-04T08:32:53.270Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "privateUsersPasswordChanged": {
        "value": {
          "success": true,
          "outcome": {
            "userId": 2,
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwibmFtZSI6IkdhbGlsZW8iLCJzdXJuYW1lIjoiR2FsaWxlaSIsInJvbGUiOiJQdWJsaXNoZXIiLCJlbWFpbCI6ImVwcHVlc2ltdW92ZUBob3RtYWlsLml0IiwiaWF0IjoxNzE3NTY1MzU2LCJleHAiOjE3MTc1NjU2NTZ9.ECpsaqaNESEUFYDaRSBpdSzevQpZTidGBFYCW0XD3z8"
          }
        }
      },
      "privateUsersPublisherDeletedWithPictures": {
        "value": {
          "success": true,
          "outcome": {
            "user": {
              "id": 13,
              "name": "Jerry",
              "surname": "Milk",
              "role": "Publisher",
              "email": "boaster@hotmail.it",
              "thumb": "U1717389083668gzz.jpg",
              "website": "www.boaster.it",
              "tokenExpAt": "2024-06-03T04:36:23.000Z",
              "createdAt": "2024-06-03T04:31:23.743Z",
              "updatedAt": "2024-06-03T04:31:23.751Z",
              "pictures": [
                {
                  "image": "P1717389126006kmr.jpg"
                },
                {
                  "image": "P1717389137132wzm.jpg"
                }
              ]
            }
          }
        }
      },
      "privateUsersUpdate_1": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": null,
              "website": null,
              "tokenExpAt": "2024-06-05T02:05:05.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:00:05.187Z"
            },
            "updated": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": "U1717552852370xno.jpg",
              "website": "www.akisworld.jp",
              "tokenExpAt": "2024-06-05T02:05:52.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:00:52.386Z"
            },
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc1NTI4NTIsImV4cCI6MTcxNzU1MzE1Mn0.hdHHvL8xbP9Z-f3i0fmzTUSa06--i_20wM4z4eTlfMI"
          }
        }
      },
      "privateUsersUpdate_2": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": "U1717552852370xno.jpg",
              "website": "www.akisworld.jp",
              "tokenExpAt": "2024-06-05T02:10:54.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:05:54.190Z"
            },
            "updated": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": "U1717553196724equ.jpg",
              "website": null,
              "tokenExpAt": "2024-06-05T02:11:36.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:06:36.744Z"
            },
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc1NTMxOTYsImV4cCI6MTcxNzU1MzQ5Nn0.k3cyY-hjBnvsoimYse10E9t3RAjCCC2uoF6lT_ykFeo"
          }
        }
      },
      "privateUsersUpdate_3": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": "U1717553196724equ.jpg",
              "website": null,
              "tokenExpAt": "2024-06-05T02:19:15.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:14:15.650Z"
            },
            "updated": {
              "id": 1,
              "name": "Aki New Name",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": "U1717553196724equ.jpg",
              "website": null,
              "tokenExpAt": "2024-06-05T02:20:25.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:15:25.568Z"
            },
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc1NTM3MjUsImV4cCI6MTcxNzU1NDAyNX0.Yy6XH4GaG_GeS5AW-jsZvkTRoSgHrg63ydXvJGZJrbA"
          }
        }
      },
      "privateUsersUpdate_4": {
        "value": {
          "success": true,
          "outcome": {
            "previous": {
              "id": 1,
              "name": "Aki New Name",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": "U1717553655632tyt.jpg",
              "website": null,
              "tokenExpAt": "2024-06-05T02:25:28.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:20:28.109Z"
            },
            "updated": {
              "id": 1,
              "name": "Aki",
              "surname": "Blueberry",
              "role": "Admin",
              "email": "akiacp@blueberry.it",
              "thumb": null,
              "website": null,
              "tokenExpAt": "2024-06-05T02:25:55.000Z",
              "createdAt": "2024-06-04T05:39:13.774Z",
              "updatedAt": "2024-06-05T02:20:55.319Z"
            },
            "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFraSBOZXcgTmFtZSIsInN1cm5hbWUiOiJCbHVlYmVycnkiLCJyb2xlIjoiQWRtaW4iLCJlbWFpbCI6ImFraWFjcEBibHVlYmVycnkuaXQiLCJpYXQiOjE3MTc1NTQwNTUsImV4cCI6MTcxNzU1NDM1NX0.IsnyHH9pdiU8tIZ8Ip0AhMgP1FSUjhqtTN_WeW4spKo"
          }
        }
      },
      "publisherCategoriesMore": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 4,
                "name": "The ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 1,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "slugtext": "the-",
              "used-by-publisher-2": false
            }
          }
        }
      },
      "publisherCategoriesNoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 5,
                "name": "Colors",
                "thumb": "C1717491535007axj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:55.018Z"
              },
              {
                "id": 3,
                "name": "Jupiter",
                "thumb": "C1717491493433toj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 6,
                "name": "Quantum physics",
                "thumb": "C1717491586719ubv.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:59:46.725Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z"
              },
              {
                "id": 2,
                "name": "The solar system",
                "thumb": "C1717491276927smb.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:36.935Z"
              },
              {
                "id": 1,
                "name": "Universe",
                "thumb": "C1717491254638bra.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:14.654Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 6,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {}
          }
        }
      },
      "publisherCategoriesShow": {
        "value": {
          "success": true,
          "outcome": {
            "category": {
              "id": 1,
              "name": "Universe",
              "thumb": "C1717491254638bra.jpg",
              "ownerId": 1,
              "createdAt": "2024-06-04T08:54:14.654Z"
            }
          }
        }
      },
      "publisherCategoriesUsedFalse": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 5,
                "name": "Colors",
                "thumb": "C1717491535007axj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:55.018Z"
              },
              {
                "id": 6,
                "name": "Quantum physics",
                "thumb": "C1717491586719ubv.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:59:46.725Z"
              },
              {
                "id": 4,
                "name": "The ocean",
                "thumb": "C1717491517735ofc.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:37.746Z"
              },
              {
                "id": 1,
                "name": "Universe",
                "thumb": "C1717491254638bra.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:14.654Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 4,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "used-by-publisher-2": false
            }
          }
        }
      },
      "publisherCategoriesUsedTrue": {
        "value": {
          "success": true,
          "outcome": {
            "categories": [
              {
                "id": 3,
                "name": "Jupiter",
                "thumb": "C1717491493433toj.jpg",
                "ownerId": 5,
                "createdAt": "2024-06-04T08:58:13.446Z"
              },
              {
                "id": 2,
                "name": "The solar system",
                "thumb": "C1717491276927smb.jpg",
                "ownerId": 1,
                "createdAt": "2024-06-04T08:54:36.935Z"
              }
            ],
            "pagingInfo": {
              "totalItems": 2,
              "itemsPerPage": 10,
              "totalPages": 1,
              "currentPage": 1
            },
            "filters": {
              "used-by-publisher-2": true
            }
          }
        }
      },
      "PublisherPictures3NoQuery": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 3,
              "title": "The Moon Road",
              "description": "The moon reflected on the ocean.",
              "image": "P1717492200919iha.jpg",
              "visible": true,
              "createdAt": "2024-06-04T09:10:00.936Z",
              "updatedAt": "2024-06-04T09:10:00.936Z"
            }
          }
        }
      },
      "PublisherPictures3Query": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 3,
              "title": "The Moon Road",
              "description": "The moon reflected on the ocean.",
              "image": "P1717492200919iha.jpg",
              "visible": true,
              "createdAt": "2024-06-04T09:10:00.936Z",
              "updatedAt": "2024-06-09T08:02:02.375Z",
              "categories": {
                "count": 2
              }
            }
          }
        }
      },
      "PublisherPicturesDelete": {
        "value": {
          "success": true,
          "outcome": {
            "picture": {
              "id": 7,
              "title": "The Tower of Pisa",
              "description": "The Tower of Pisa as a laboratory for physics experiments.",
              "image": "P1717633678997kfw.png",
              "visible": false,
              "ownerId": 2,
              "createdAt": "2024-06-06T00:27:59.013Z",
              "updatedAt": "2024-06-06T02:50:17.566Z"
            }
          }
        }
      },
      "failureAdminCategories400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter 'filters(used)' is syntactically incorrect.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureAdminCategories415-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Unsupported file: ",
            "report": {
              "fileType": {
                "providedFileType": "text",
                "allowedFileType": "image",
                "isValidFileType": false
              },
              "fileExtension": {
                "providedFileExt": "txt",
                "allowedFileExt": [
                  "jpg",
                  "jpeg"
                ],
                "isValidFileExt": false
              },
              "fileUploaded": false
            },
            "error": "ErrorUnsupportedFile"
          }
        }
      },
      "failureAdminCategories415-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Unsupported file: ",
            "report": {
              "fileType": {
                "providedFileType": "image",
                "allowedFileType": "image",
                "isValidFileType": true
              },
              "fileExtension": {
                "providedFileExt": "png",
                "allowedFileExt": [
                  "jpg",
                  "jpeg"
                ],
                "isValidFileExt": false
              },
              "fileUploaded": false
            },
            "error": "ErrorUnsupportedFile"
          }
        }
      },
      "failureAdminCategories415-3": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Unsupported file: ",
            "report": {
              "fileType": {
                "providedFileType": "image",
                "allowedFileType": "image",
                "isValidFileType": true
              },
              "fileExtension": {
                "providedFileExt": "jpg",
                "allowedFileExt": [
                  "jpg",
                  "jpeg"
                ],
                "isValidFileExt": true
              },
              "fileSize": {
                "providedFileSize": "351878 bytes",
                "maxAllowedFileSize": "104857.6 bytes - (0.1 MB)",
                "isValidFileSize": false
              },
              "fileUploaded": false
            },
            "error": "ErrorUnsupportedFile"
          }
        }
      },
      "failureAdminCategories422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "publisher": "Query value is invalid. Value is 'galileo'. Must be a number, integer, without extra characters!"
                  }
                },
                "msg": "Invalid query",
                "path": "filters",
                "location": "query"
              }
            ]
          }
        }
      },
      "failureAdminCategoriesCType": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "The Content-Type 'multipart/form-data' is required for this route",
            "error": "ErrorMulterMiddleware"
          }
        }
      },
      "failureAdminCategoriesPOST422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "<Black holes>",
                "msg": "The field [name] can only contain letters and spaces",
                "path": "name",
                "location": "body"
              }
            ]
          }
        }
      },
      "failureAdminCategoriesSlug409": {
        "value": {
          "success": false,
          "outcome": {
            "status": 409,
            "message": "Invalid slug because already existing into the database",
            "error": "ErrorRepeatedData"
          }
        }
      },
      "failureAdminCategoriesUpdate-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Unsupported file: ",
            "report": {
              "fileType": {
                "providedFileType": "image",
                "allowedFileType": "image",
                "isValidFileType": true
              },
              "fileExtension": {
                "providedFileExt": "gif",
                "allowedFileExt": [
                  "jpg",
                  "jpeg"
                ],
                "isValidFileExt": false
              },
              "fileUploaded": false
            },
            "error": "ErrorUnsupportedFile"
          }
        }
      },
      "failureAdminCategoriesUpdate-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "yes",
                "msg": "The field 'disconnect' must be boolean: values accepted: [0, 1, false, true]",
                "path": "disconnect",
                "location": "body"
              }
            ]
          }
        }
      },
      "failureAuthCheckToken401Black": {
        "value": {
          "success": false,
          "outcome": {
            "status": 401,
            "message": "Error 401: Invalid token (in black list)!",
            "error": "ErrorInvalidData"
          }
        }
      },
      "failureAuthCheckToken401Wrong": {
        "value": {
          "success": false,
          "outcome": {
            "status": 401,
            "message": "Error 401: Invalid token (wrong)!",
            "error": "ErrorInvalidData"
          }
        }
      },
      "failureAuthLogIn403": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "User already logged In. The token expires in 4 minutes, 51 seconds.",
            "error": "ErrorOperationRefused"
          }
        }
      },
      "failureAuthLogIn403Rejected": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "Operation refused.",
            "error": "ErrorFromDB"
          }
        }
      },
      "failureAuthLogIn404": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: user not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureAuthLogIn422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "akiacp@blueberry",
                "msg": "Email address is not valid",
                "path": "email",
                "location": "body"
              }
            ]
          }
        }
      },
      "failureAuthLogInInvalidPassword401": {
        "value": {
          "success": false,
          "outcome": {
            "status": 401,
            "message": "Error 401: Invalid password!",
            "error": "ErrorInvalidData"
          }
        }
      },
      "failureAuthLogOut403": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "User not allowed to perform the requested operation - token is expired",
            "error": "ErrorUserNotAllowed"
          }
        }
      },
      "failureAuthSignUp409": {
        "value": {
          "success": false,
          "outcome": {
            "status": 409,
            "message": "Invalid email because already existing into the database",
            "error": "ErrorRepeatedData"
          }
        }
      },
      "failureAuthSignUp415": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Multer configuration error",
            "error": "ErrorMulterMiddleware"
          }
        }
      },
      "failureAuthSignUp422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "www.mywrongwebsite",
                "msg": "The URL structure is not valid.",
                "path": "website",
                "location": "body"
              }
            ]
          }
        }
      },
      "failureChangeVisibility403-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "The user [1] is not a publisher.",
            "error": "ErrorOperationRefused"
          }
        }
      },
      "failureChangeVisibility403-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "The publisher [4] is not the owner of the picture [2]",
            "error": "ErrorOperationRefused"
          }
        }
      },
      "failureChangeVisibility404-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: Publisher Id [11] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureChangeVisibility422-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "galileo",
                "msg": "publisherId is not valid: it must be integer, positive, not zero",
                "path": "publisherId",
                "location": "params"
              }
            ]
          }
        }
      },
      "failureChangeVisibility422-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "true",
                "msg": "Param 'visibility' is wrong. Allowed values: [on/off]",
                "path": "visibility",
                "location": "params"
              }
            ]
          }
        }
      },
      "failureGuestCategoriesIndex400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter ' paging[itemsperpage]' is syntactically incorrect.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureGuestCategoriesIndex422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "slugtext": "Query value is invalid. Value is '4'. Unallowed characters into the text"
                  }
                },
                "msg": "Invalid query",
                "path": "filters",
                "location": "query"
              }
            ]
          }
        }
      },
      "failureGuestCategoriesShow404": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: Category Id [14] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureGuestCategoriesShow422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "3.5",
                "msg": "id is not valid: it must be integer, positive, not zero",
                "path": "id",
                "location": "params"
              }
            ]
          }
        }
      },
      "failureGuestPicturesIndex400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "In the provided query pair 'include[categories]=', the value is syntactically incorrect.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureGuestPicturesIndex422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "categories": "Query value is invalid. Value is '5 and 6'. The operator value [5 and 6] is wrong. Must be in [or,and]"
                  }
                },
                "msg": "Invalid query",
                "path": "filters",
                "location": "query"
              }
            ]
          }
        }
      },
      "failureGuestPicturesShow400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter '[categories]' is syntactically incorrect.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureGuestPicturesShow404": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: Picture Id [73] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureGuestPicturesShow404ForStrict": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: Picture Id [2] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureGuestPicturesShow422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "a",
                "msg": "id is not valid: it must be integer, positive, not zero",
                "path": "id",
                "location": "params"
              }
            ]
          }
        }
      },
      "failureGuestUsersIndex400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter 'filters[ thumb]' is syntactically incorrect.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureGuestUsersIndex422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "thumb": "Repeated query or invalid value '[false],[true]'"
                  }
                },
                "msg": "Invalid query",
                "path": "filters",
                "location": "query"
              }
            ]
          }
        }
      },
      "failureGuestUsersShow400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter 'include' is not valid.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureGuestUsersShow404": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: User Id [202] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureGuestUsersShow404ForStrict": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: User Id [1] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failureGuestUsersShow422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "0",
                "msg": "id is not valid: it must be integer, positive, not zero",
                "path": "id",
                "location": "params"
              }
            ]
          }
        }
      },
      "failureInfoApiQueries400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter 'queryparam' is not valid.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureInfoApiQueries422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "info": "Repeated query or invalid value '[filters],[options]'"
                  }
                },
                "msg": "Invalid query",
                "path": "queryparam",
                "location": "query"
              }
            ]
          }
        }
      },
      "failureInfoApiRoutes400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter 'route' is not valid.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failureInfoApiRoutes422-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "strict": "Repeated query or invalid value '[/guest/categories],[/guest/pictures]'"
                  }
                },
                "msg": "Invalid query",
                "path": "route",
                "location": "query"
              }
            ]
          }
        }
      },
      "failureInfoApiRoutes422-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "errors": {
                    "route": "Too many queries: { strict: /guest/categories, family: all }! < route > accepts only one query!"
                  }
                },
                "msg": "Invalid query",
                "path": "route",
                "location": "query"
              }
            ]
          }
        }
      },
      "failurePrivateUsersChangePassword_1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "JupiterAnd4moons",
                "msg": "Password length must be in [8...20]. It must contain lowercase, uppercase, digit, symbol (atleast 1 of each)",
                "path": "password",
                "location": "body"
              }
            ]
          }
        }
      },
      "failurePrivateUsersChangePassword_2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              "The new password must be different than the previous password."
            ]
          }
        }
      },
      "failurePrivateUsersChangePassword_3": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              "The field 'confirmNew' is required!"
            ]
          }
        }
      },
      "failurePrivateUsersChangePassword_4": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              "The fields 'newPassword' and 'confirmNew' don't match."
            ]
          }
        }
      },
      "failurePrivateUsersIDMatch": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "User not allowed to delete or modify another user's data!",
            "error": "ErrorUserNotAllowed"
          }
        }
      },
      "failurePrivateUsersShow404ForStrict": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: User Id [2] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failurePrivateUsersUniqueAdminDeletion": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "The 'unique' Admin cannot be deleted",
            "error": "ErrorOperationRefused"
          }
        }
      },
      "failurePublisherPictures1Show404": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: Picture Id [1] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failurePublisherPictures415-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Unsupported file: ",
            "report": {
              "fileType": {
                "providedFileType": "text",
                "allowedFileType": "image",
                "isValidFileType": false
              },
              "fileExtension": {
                "providedFileExt": "txt",
                "allowedFileExt": [
                  "jpg",
                  "jpeg",
                  "png",
                  "webp"
                ],
                "isValidFileExt": false
              },
              "fileUploaded": false
            },
            "error": "ErrorUnsupportedFile"
          }
        }
      },
      "failurePublisherPictures415-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Unsupported file: ",
            "report": {
              "fileType": {
                "providedFileType": "image",
                "allowedFileType": "image",
                "isValidFileType": true
              },
              "fileExtension": {
                "providedFileExt": "gif",
                "allowedFileExt": [
                  "jpg",
                  "jpeg",
                  "png",
                  "webp"
                ],
                "isValidFileExt": false
              },
              "fileUploaded": false
            },
            "error": "ErrorUnsupportedFile"
          }
        }
      },
      "failurePublisherPictures415-3": {
        "value": {
          "success": false,
          "outcome": {
            "status": 415,
            "message": "Image file is required",
            "error": "ErrorMulterMiddleware"
          }
        }
      },
      "failurePublisherPicturesCategories404": {
        "value": {
          "success": false,
          "outcome": {
            "status": 404,
            "message": "Error 404: Category Ids [9,11] not found! ",
            "error": "ErrorResourceNotFound"
          }
        }
      },
      "failurePublisherPicturesIndex400": {
        "value": {
          "success": false,
          "outcome": {
            "status": 400,
            "message": "The provided query parameter 'include(categories)' is syntactically incorrect.",
            "error": "ErrorInvalidQuery"
          }
        }
      },
      "failurePublisherPicturesIndex422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": {
                  "valid": {},
                  "errors": {
                    "visible": "Query value is invalid. Value is '5'. Must be in [true,false]"
                  }
                },
                "msg": "Invalid query",
                "path": "filters",
                "location": "query"
              }
            ]
          }
        }
      },
      "failurePublisherPicturesNotOwner-1": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "User not allowed to modify another user's picture",
            "error": "ErrorUserNotAllowed"
          }
        }
      },
      "failurePublisherPicturesNotOwner-2": {
        "value": {
          "success": false,
          "outcome": {
            "status": 403,
            "message": "User not allowed to delete another user's picture",
            "error": "ErrorUserNotAllowed"
          }
        }
      },
      "failurePublisherPicturesPOST422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "The sea",
                "msg": "Title's length must be in [10...50] characters",
                "path": "title",
                "location": "body"
              }
            ]
          }
        }
      },
      "failurePublisherPicturesPUT422": {
        "value": {
          "success": false,
          "outcome": {
            "status": 422,
            "message": "Errors in request validation",
            "error": "ErrorRequestValidation",
            "validationErrors": [
              {
                "type": "field",
                "value": "5",
                "msg": "Categories must be an array",
                "path": "categories",
                "location": "body"
              }
            ]
          }
        }
      }
    }
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "Home"
        ],
        "summary": "Minimal information about the project",
        "description": "Minimal information about the project - consistently delivers a successful response with status `200`.",
        "responses": {
          "200": {
            "description": "***Project information successfully returned.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "type": "object",
                          "description": "Provides an object with minimal information."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Project info": {
                    "$ref": "#/components/examples/homeInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/info": {
      "get": {
        "tags": [
          "Info/API"
        ],
        "summary": "Returns comprehensive details about the current API.",
        "description": "The `/info` endpoint serves as an entry point to discover essential details about the API.<br> \nIt outlines basic rules and descriptions, with further insights available from:\n- **Routes and Endpoints**: Explore extensive information at `/info/apiroutes`.\n- **Query Parameters**: Detailed descriptions available at `/info/apiqueries`.\n\nThis endpoint consistently delivers a successful response with status `200`.\n",
        "responses": {
          "200": {
            "description": "***API information successfully returned.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": "Provides an array of objects, each detailing a distinct aspect of the API.",
                      "properties": {
                        "outcome": {
                          "type": "array",
                          "description": "Each object within the array offers detailed information on various API facets.",
                          "items": {
                            "type": "object",
                            "description": "Details a specific API facet."
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "API info": {
                    "value": {
                      "success": true,
                      "outcome": "An array composed of objects, each detailing distinct aspects of the API."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/info/apiroutes": {
      "get": {
        "tags": [
          "Info/Detailed/Routes"
        ],
        "summary": "Provides detailed information on all API routes.",
        "description": "The `/info/apiroutes` endpoint offers a comprehensive overview of each API route, explaining the methods used, the purposes they serve, and how data interactions are managed.<br> \nDetailed insights include:\n- **Required Data**: Essential information necessary for the API to operate correctly.\n- **Optional Data**: Supplementary data that can enhance functionality but is not critical for basic operations.\n- **Data Handling**: Details how data should be transmitted (via `headers`, `body`, `params`, or `query`) and outlines the expected format for returned data.\n\nUtilize the `route` query parameter to retrieve specific endpoint details or to examine a group of endpoints with similar functionalities.<br> \nThis parameter is `required` and should be formatted in bracket notation, e.g., `route[key]=value`, as specified in the `RoutesInformation` from the `/info` endpoint.\n\nThe optional `extra` query parameter (also to be formatted in bracket notation) allows you to specify additional details in the response:\n- **Failure Object Information**: By setting `extra[failureobject]=true`, you can request additional information about the format of the response in cases where the API call fails. This can be particularly useful for debugging and understanding error handling in the API.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/RouteStrictParam"
          },
          {
            "$ref": "#/components/parameters/RouteFamilyParam"
          },
          {
            "$ref": "#/components/parameters/ExtraFailureObjectParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The requested information is returned.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "type": "object",
                          "properties": {
                            "responseData": {
                              "type": "object",
                              "description": "Data relating to the requested route or family of routes.",
                              "properties": {
                                "requestedInfo": {
                                  "type": "object",
                                  "description": "Specification of the type of request, namely the route or family of routes, with the corresponding value."
                                },
                                "data": {
                                  "type": "array",
                                  "description": "Array containing all the endpoints related to the route, or to all routes of the requested family, along with their respective detailed information.",
                                  "items": {
                                    "type": "object",
                                    "description": "The single endpoint with its respective detailed information."
                                  }
                                }
                              }
                            },
                            "extraData": {
                              "type": "array",
                              "description": "Array containing the individual and detailed extra information requested (as of the current state of the API - version 1.0.0, the only extra information obtainable is that related to responses in case of failure, obtainable with the query `extra[failureobject]=true`).",
                              "items": {
                                "type": "object",
                                "description": "The requested individual extra information, complete with details."
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "/info/apiroutes?route[strict]=/guest/categories": {
                    "$ref": "#/components/examples/infoApiRoutesStrictGuestCategories"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/info/apiroutes?route=/guest/categories`": {
                    "$ref": "#/components/examples/failureInfoApiRoutes400"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/info/apiroutes?route[strict]=/guest/categories&route[strict]=/guest/pictures`": {
                    "$ref": "#/components/examples/failureInfoApiRoutes422-1"
                  },
                  "Error 422 - Inconsistent query... `/info/apiroutes?route[strict]=/guest/categories&route[family]=all`": {
                    "$ref": "#/components/examples/failureInfoApiRoutes422-2"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/info/apiqueries": {
      "get": {
        "tags": [
          "Info/Detailed/Queries"
        ],
        "summary": "Provides detailed information on all accepted queries for all API routes",
        "description": "The `/info/apiqueries` endpoint offers insights into all the query parameters that can be used across various API routes, providing a comprehensive understanding of the customization options available for API interaction.<br> \nThis endpoint is essential for users seeking to utilize advanced query features effectively.<br>\n- **Required Parameter**: The `queryparam[info]` parameter is required for this route. It specifies the type of query parameter information to retrieve. All possible values for this parameter can be found in the `RoutesInformation` object provided by the `/info` endpoint.<br>\n- **Usage**: How and where each query parameter can be applied.\n- **Syntax**: Proper formatting of query parameters using bracket notation, e.g., `queryparam[key]=value`.\n- **MultiKey Support**: Specifies which query parameters support `multiKey` capabilities, allowing multiple keys within the same query string. For detailed information on `multiKey` parameters, refer to the `API_Rules` object within the `/info` endpoint response.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/QueryParamInfo"
          }
        ],
        "responses": {
          "200": {
            "description": "***The requested information is returned.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "type": "object",
                          "properties": {
                            "responseData": {
                              "type": "object",
                              "description": "Data relating to the requested query parameter.",
                              "properties": {
                                "requestedInfo": {
                                  "type": "object",
                                  "description": "Specification of the requested query parameter."
                                },
                                "data": {
                                  "type": "array",
                                  "description": "Array containing the single, requested query parameter with all the information about it, its usage and all the routes that accept its usage. In case it was requested `all`, the array will contain all query parameters with all their information.",
                                  "items": {
                                    "type": "object",
                                    "description": "The single query parameter."
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "/info/apiqueries?queryparam[info]=include": {
                    "$ref": "#/components/examples/infoApiQueriesInclude"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/info/apiqueries?queryparam=filters`": {
                    "$ref": "#/components/examples/failureInfoApiQueries400"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/info/apiqueries?queryparam[info]=filters&queryparam[info]=options`": {
                    "$ref": "#/components/examples/failureInfoApiQueries422"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/signup": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Registers a new User.",
        "description": "The `role` assigned to the new user is `Publisher` (default).<br>\nAfter registration a log-in attempt is made.<br> \nRegardless of the log-in outcome, the registration is considered successful with a `status` of `201`.<br>\nNon-compliant files will be ignored without error.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/auth&extra[failureobject]=true`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **imageUploader**\n- **validationMiddleware**\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Registration"
              },
              "examples": {
                "New user without thumb (all Content-Types)": {
                  "$ref": "#/components/examples/RegistrationExample"
                },
                "New user with thumb (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/RegistrationWithThumbExample"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/Registration"
              },
              "examples": {
                "New user without thumb (all Content-Types)": {
                  "$ref": "#/components/examples/RegistrationExample"
                },
                "New user with thumb (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/RegistrationWithThumbExample"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/RegistrationWithThumb"
              },
              "examples": {
                "New user without thumb (all Content-Types)": {
                  "$ref": "#/components/examples/RegistrationExample"
                },
                "New user with thumb (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/RegistrationWithThumbExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "***Publisher successfully registered (and eventually logged-in).***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "Registration data are returned.",
                          "oneOf": [
                            {
                              "type": "object",
                              "title": "Publisher created and logged-in",
                              "properties": {
                                "user": {
                                  "allOf": [
                                    {
                                      "$ref": "#/components/responses/UsersCompleteData"
                                    },
                                    {
                                      "type": "object",
                                      "description": null
                                    }
                                  ]
                                },
                                "logged": {
                                  "type": "boolean",
                                  "value": true
                                },
                                "token": {
                                  "type": "string",
                                  "description": "The JWT Authentication token"
                                }
                              }
                            },
                            {
                              "type": "object",
                              "title": "Publisher created but not logged-in",
                              "properties": {
                                "user": {
                                  "allOf": [
                                    {
                                      "$ref": "#/components/responses/UsersCompleteData"
                                    },
                                    {
                                      "type": "object",
                                      "description": null
                                    }
                                  ]
                                },
                                "logged": {
                                  "type": "boolean",
                                  "value": false
                                }
                              }
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Successful registration (without thumb) with successful log-in": {
                    "$ref": "#/components/examples/authSignUpLoggedNoThumb"
                  },
                  "Successful registration (with thumb) with successful log-in": {
                    "$ref": "#/components/examples/authSignUpLoggedWithThumb"
                  },
                  "Successful registration with failed log-in": {
                    "$ref": "#/components/examples/authSignUpUnlogged"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Rejected by database***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError403-Refused"
                },
                "examples": {
                  "Error 403 - Rejected by database": {
                    "$ref": "#/components/examples/failureAuthLogIn403Rejected"
                  }
                }
              }
            }
          },
          "409": {
            "description": "***Invalid email (already existing)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError409-InvalidEmail"
                },
                "examples": {
                  "Error 409 - Invalid email": {
                    "$ref": "#/components/examples/failureAuthSignUp409"
                  }
                }
              }
            }
          },
          "415": {
            "description": "***Image wrong field name***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError415"
                    },
                    {
                      "title": "Error 415 - Image field name is wrong"
                    }
                  ]
                },
                "examples": {
                  "Error 415 - Wrong field name": {
                    "$ref": "#/components/examples/failureAuthSignUp415"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid website": {
                    "$ref": "#/components/examples/failureAuthSignUp422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Allows the user to log-in.",
        "description": "Both roles `Admin` and `Publisher` can log-in (if not already logged), by providing correct `email` and `password`.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/auth&extra[failureobject]=true`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **validationMiddleware**\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Credentials"
              },
              "examples": {
                "credentials": {
                  "$ref": "#/components/examples/CredentialsExample"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/Credentials"
              },
              "examples": {
                "credentials": {
                  "$ref": "#/components/examples/CredentialsExample"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/Credentials"
              },
              "examples": {
                "credentials": {
                  "$ref": "#/components/examples/CredentialsExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "***User successfully logged-in.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "type": "object",
                          "description": "The just logged-in user's data along with the just released JWT are returned.",
                          "properties": {
                            "user": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/UsersCompleteData"
                                },
                                {
                                  "type": "object",
                                  "description": null
                                }
                              ]
                            },
                            "token": {
                              "type": "string",
                              "description": "The JWT Authentication token"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "User successfully logged-in": {
                    "$ref": "#/components/examples/authLogIn"
                  }
                }
              }
            }
          },
          "401": {
            "description": "***Invalid password***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError401-InvalidPassword"
                },
                "examples": {
                  "Error 401 - Invalid password": {
                    "$ref": "#/components/examples/failureAuthLogInInvalidPassword401"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User already logged-in***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError403-UserLoggedIn"
                },
                "examples": {
                  "Error 403 - User already logged-in": {
                    "$ref": "#/components/examples/failureAuthLogIn403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***User not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-UserNotFound"
                },
                "examples": {
                  "Error 404 - User not found": {
                    "$ref": "#/components/examples/failureAuthLogIn404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid email": {
                    "$ref": "#/components/examples/failureAuthLogIn422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Authentication",
          "Private",
          "Publisher",
          "Admin"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the user to log-out.",
        "description": "Both roles `Admin` and `Publisher` can log-out, if already logged-in, by providing the `Bearer` token in the `Authorization` header.<br>\nIf the logout operation is successful, the provided `token` is moved to a `blacklist` to prevent its further use.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/auth&extra[failureobject]=true`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n",
        "responses": {
          "200": {
            "description": "***User successfully logged-out.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "type": "object",
                          "description": "The unlogged user's ID is returned.",
                          "properties": {
                            "unlogged": {
                              "type": "integer",
                              "description": "Logged out user ID."
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "User successfully logged-out": {
                    "$ref": "#/components/examples/authUnlogged"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError403-Authorization"
                },
                "examples": {
                  "Error 403 - User not allowed": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/auth/checktoken": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Checks the validity of a Json Web Token.",
        "description": "Requires the JWT into the request body, then checks its validity.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/auth&extra[failureobject]=true`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/CheckToken"
              },
              "examples": {
                "token": {
                  "$ref": "#/components/examples/CheckTokenExample"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/CheckToken"
              },
              "examples": {
                "token": {
                  "$ref": "#/components/examples/CheckTokenExample"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/CheckToken"
              },
              "examples": {
                "token": {
                  "$ref": "#/components/examples/CheckTokenExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "***The provided token is valid and not yet expired.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "type": "object",
                          "description": "The provided token and the related payload are returned.",
                          "properties": {
                            "token": {
                              "type": "string",
                              "description": "The provided Authentication token"
                            },
                            "payload": {
                              "$ref": "#/components/responses/JWTPayload"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "The provided token is valid": {
                    "$ref": "#/components/examples/authTokenChecked"
                  }
                }
              }
            }
          },
          "401": {
            "description": "***Error due to missing, wrong, expired or blacklisted `Bearer` token.***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError401-InvalidBearer"
                },
                "examples": {
                  "Error 401 - Wrong token": {
                    "$ref": "#/components/examples/failureAuthCheckToken401Wrong"
                  },
                  "Error 401 - Blacklisted token": {
                    "$ref": "#/components/examples/failureAuthCheckToken401Black"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/guest/users/allowedQueries": {
      "get": {
        "tags": [
          "Public",
          "Users",
          "Info/Basics/Queries"
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/guest/users`.",
        "description": "The `/guest/users/allowedQueries` endpoint only returns a successful response with status `200`.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/users`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          }
        }
      }
    },
    "/guest/users": {
      "get": {
        "tags": [
          "Public",
          "Users"
        ],
        "summary": "Returns a list of registered users.",
        "description": "The endpoint returns a list of registered users.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/users`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nAs standard behavior, with `strictsearch` set to `true` by default, the endpoint returns only users with the `Publisher` role.<br>\nBy using the query parameter `options[strictsearch]=false`, users with the `Admin` role will also be returned, but with limited information.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersThumbParam"
          },
          {
            "$ref": "#/components/parameters/FiltersWebsiteParam"
          },
          {
            "$ref": "#/components/parameters/IncludePicturesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/OptionsStrictSearchParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "users": {
                              "description": "The list of all retrieved users for the current page.<br>\nThe returned users list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/UsersDataForGuestUsersRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - strictsearch default true)... `/guest/users`": {
                    "$ref": "#/components/examples/guestUsersNoQuery"
                  },
                  "(one query - strictsearch false)... `/guest/users?options[strictsearch]=false`": {
                    "$ref": "#/components/examples/guestUsersStrictFalse"
                  },
                  "(more queries - strictsearch default true)... `/guest/users?include[pictures]=basic&filters[thumb]=true`": {
                    "$ref": "#/components/examples/guestUsersMoreStrictDefault"
                  },
                  "(more queries - strictsearch false)... `/guest/users?include[pictures]=complete&options[strictsearch]=false&filters[thumb]=true`": {
                    "$ref": "#/components/examples/guestUsersMoreStrictFalse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/guest/users?filters[ thumb]=false`": {
                    "$ref": "#/components/examples/failureGuestUsersIndex400"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/guest/users?filters[thumb]=false&filters[thumb]=true`": {
                    "$ref": "#/components/examples/failureGuestUsersIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/guest/users/{id}": {
      "get": {
        "tags": [
          "Public",
          "Users"
        ],
        "summary": "Returns the requested user's data.",
        "description": "The endpoint returns the user data for the `id` that matches the provided parameter.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/users`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nAs standard behavior, with `strictsearch` set to `true` by default, the endpoint returns the user's data only if the user has the `Publisher` role. If the provided `id` parameter matches a user with the `Admin` role, a `404` error (**user ID not found**) is returned even though the ID exists.<br> \nBy using the query parameter `options[strictsearch]=false`, data for users of any role are returned, but with limited information in the case of the `Admin` role.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdParam"
          },
          {
            "$ref": "#/components/parameters/IncludePicturesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/OptionsStrictSearchParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested user is returned.",
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/responses/UsersDataForGuestUsersRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - userId 2)... `/guest/users/2`": {
                    "$ref": "#/components/examples/guestUsers2NoQuery"
                  },
                  "(one query - userId 2 - escapetext default false)... `/guest/users/2?include[pictures]=complete`": {
                    "$ref": "#/components/examples/guestUsers2EscapeDefault"
                  },
                  "(more queries - userId 2 - escapetext true)... `/guest/users/2?include[pictures]=complete&options[escapetext]=true`": {
                    "$ref": "#/components/examples/guestUsers2EscapeTrue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/guest/users/2?include`": {
                    "$ref": "#/components/examples/failureGuestUsersShow400"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***User ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-UserIdNotFound"
                },
                "examples": {
                  "Error 404 - User Id not found (Id exists but it is related to a role Admin and strictsearch is true as default)... `/guest/users/1`": {
                    "$ref": "#/components/examples/failureGuestUsersShow404ForStrict"
                  },
                  "Error 404 - User Id not found (Id doesn't actually exist)... `/guest/users/202`": {
                    "$ref": "#/components/examples/failureGuestUsersShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid user Id... `/guest/users/0`": {
                    "$ref": "#/components/examples/failureGuestUsersShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/guest/pictures/allowedQueries": {
      "get": {
        "tags": [
          "Public",
          "Pictures",
          "Info/Basics/Queries"
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/guest/pictures`.",
        "description": "The `/guest/pictures/allowedQueries` endpoint only returns a successful response with status `200`.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/pictures`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          }
        }
      }
    },
    "/guest/pictures": {
      "get": {
        "tags": [
          "Public",
          "Pictures"
        ],
        "summary": "Returns a list of pictures.",
        "description": "The endpoint returns a list of pictures.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/pictures`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nAs standard behavior, with `strictsearch` set to `true` by default, the endpoint returns only pictures where the `visible` field is set to `true`.<br> \nBy using the query parameter `options[strictsearch]=false`, pictures with the `visible` field set to `false` will also be returned, but with limited information.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersTitleTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersDescriptionTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/FiltersPublisherParamForFamilyPictures"
          },
          {
            "$ref": "#/components/parameters/IncludeCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/OptionsStrictSearchParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "pictures": {
                              "description": "The list of all retrieved pictures for the current page.<br>\nThe returned pictures list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/PicturesDataForGuestPicturesRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - strictsearch default true)... `/guest/pictures`": {
                    "$ref": "#/components/examples/guestPicturesNoQuery"
                  },
                  "(one query - strictsearch false)... `/guest/pictures?options[strictsearch]=false`": {
                    "$ref": "#/components/examples/guestPicturesStrictFalse"
                  },
                  "(more queries - using filters[categories] with AND logic)... `/guest/pictures?filters[categories]=and,5,6&include[categories]=complete&options[strictsearch]=false`": {
                    "$ref": "#/components/examples/guestPicturesMoreWithAND"
                  },
                  "(more queries - using filters[categories] with OR logic)... `/guest/pictures?filters[categories]=or,5,6&include[categories]=complete&options[strictsearch]=false`": {
                    "$ref": "#/components/examples/guestPicturesMoreWithOR"
                  },
                  "(more queries - using filters[categories] with OR logic and strictsearch)... `/guest/pictures?filters[categories]=or,5,6&include[categories]=complete`": {
                    "$ref": "#/components/examples/guestPicturesMoreWithORStrictDefault"
                  },
                  "(more queries)... `/guest/pictures?include[categories]=complete&filters[publisher]=3&options[strictsearch]=false&options[escapetext]=true`": {
                    "$ref": "#/components/examples/guestPicturesMore"
                  },
                  "(more queries - empty array resulting)... `/guest/pictures?filters[categories]=and,5,6,3&include[categories]=complete`": {
                    "$ref": "#/components/examples/guestPicturesMoreNoResults"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/guest/pictures?include[categories]`": {
                    "$ref": "#/components/examples/failureGuestPicturesIndex400"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/guest/pictures?filters[categories]=5 and 6`": {
                    "$ref": "#/components/examples/failureGuestPicturesIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/guest/pictures/{id}": {
      "get": {
        "tags": [
          "Public",
          "Pictures"
        ],
        "summary": "Returns the requested picture's data.",
        "description": "The endpoint returns the picture data for the `id` that matches the provided parameter.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/pictures`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nAs standard behavior, with `strictsearch` set to `true` by default, the endpoint returns the picture's data only if the `visible` field is set to `true`. If the `visible` field is set to `false`, a `404` error (**picture ID not found**) is returned, even though the ID exists.<br> \nBy using the query parameter `options[strictsearch]=false`, the picture's data are returned regardless of the `visible` field's value, but with limited information in cases where `visible` is set to `false`.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `pictureId` identifying the searched `picture`."
              }
            ]
          },
          {
            "$ref": "#/components/parameters/IncludeCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/OptionsStrictSearchParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested picture is returned.",
                          "type": "object",
                          "properties": {
                            "picture": {
                              "$ref": "#/components/responses/PicturesDataForGuestPicturesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query)... `/guest/pictures/1`": {
                    "$ref": "#/components/examples/guestPictures1NoQuery"
                  },
                  "(one query)... `/guest/pictures/1?include[categories]=complete`": {
                    "$ref": "#/components/examples/guestPictures1Include"
                  },
                  "(one query - strictsearch false for a non-visible picture)... `/guest/pictures/2?options[strictsearch]=false`": {
                    "$ref": "#/components/examples/guestPictures2StrictFalse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/guest/pictures/5?[categories]=none`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow400"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Picture ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-PictureIdNotFound"
                },
                "examples": {
                  "Error 404 - Picture Id not found (Id exists but it is related to a non-visible picture and strictsearch is true as default)... `/guest/pictures/2`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow404ForStrict"
                  },
                  "Error 404 - Picture Id not found (Id doesn't actually exist)... `/guest/pictures/73`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid picture Id... `/guest/pictures/a`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/guest/categories/allowedQueries": {
      "get": {
        "tags": [
          "Public",
          "Categories",
          "Info/Basics/Queries"
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/guest/categories`.",
        "description": "The `/guest/categories/allowedQueries` endpoint only returns a successful response with status `200`.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/categories`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          }
        }
      }
    },
    "/guest/categories": {
      "get": {
        "tags": [
          "Public",
          "Categories"
        ],
        "summary": "Returns a list of categories",
        "description": "The endpoint returns a list of categories.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/categories`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nUnlike the `/users` and `/pictures` endpoints, the `/categories` endpoint does not accept the following query parameters:\n- Query parameter `include`:<br>\n  This parameter is designed to provide nested information at lower levels (for example, information related to pictures or categories for searches on users, or information related to categories for searches on pictures). Since categories are at the lowest level (i.e., they do not have further nested information), they cannot provide more detailed information.\n- Query parameter `options`:<br>\n  In the current version, this parameter is used to return sanitized texts against **HTML injections** through the `EscapeText` key and to allow more flexible data access with the `StrictSearch` key (if set to `false`). However, the textual data (`names`) of the categories, consisting only of letters and spaces, do not present a risk of **HTML injections**, and since categories do not contain **protected elements**, neither the `EscapeText` nor the `StrictSearch` keys are relevant here. Consequently, this applies to the entire `options` query parameter in the **current version** of the API.\n---\n***Middleware chain***:\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersSlugTextParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "categories": {
                              "description": "The list of all retrieved categories for the current page.<br>\nThe returned categories list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/CategoriesDataForGuestCategoriesRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query)... `/guest/categories`": {
                    "$ref": "#/components/examples/guestCategoriesNoQuery"
                  },
                  "(one query)... `/guest/categories?filters[slugtext]=r`": {
                    "$ref": "#/components/examples/guestCategoriesSlugTextNoDash"
                  },
                  "(one query - similar to the previous but with dash '-')... `/guest/categories?filters[slugtext]=r-`": {
                    "$ref": "#/components/examples/guestCategoriesSlugTextWithDash"
                  },
                  "(more queries)... `/guest/categories?filters[slugtext]=the-&paging[itemsperpage]=1`": {
                    "$ref": "#/components/examples/guestCategoriesMore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/guest/categories? paging[itemsperpage]=3`": {
                    "$ref": "#/components/examples/failureGuestCategoriesIndex400"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query parameter... `/guest/categories?filters[slugtext]=4`": {
                    "$ref": "#/components/examples/failureGuestCategoriesIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/guest/categories/{id}": {
      "get": {
        "tags": [
          "Public",
          "Categories"
        ],
        "summary": "Returns the requested category's data",
        "description": "The endpoint returns the category data for the `id` that matches the provided parameter.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/guest/categories`<br><br>\n- `/info/apiroutes?route[family]=guest`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe `/guest/categories/:id` endpoint does not accept any query parameters (**in the current version of the API**).<br> \nSimilar to the `/users/:id` and `/pictures/:id` endpoints, the `paging` and `filters` query parameters would not make sense.<br> \nUnlike the aforementioned endpoints, but similar to the `/guest/categories` endpoint, it does not accept the `options` and `include` query parameters for the reasons mentioned in that endpoint.\n---\n***Middleware chain***:\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `categoryId` identifying the searched `category`."
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested category is returned.",
                          "type": "object",
                          "properties": {
                            "category": {
                              "$ref": "#/components/responses/CategoriesDataForGuestCategoriesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "/guest/categories/1": {
                    "$ref": "#/components/examples/guestCategories1"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Category ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                },
                "examples": {
                  "Error 404 - Category Id not found... `/guest/categories/14`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid category Id... `/guest/categories/3.5`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/users/allowedQueries": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Publisher",
          "Users",
          "Info/Basics/Queries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/private/users`.",
        "description": "The `/private/users/allowedQueries` endpoint provides the following responses:\n- A successful response with status `200`.\n- A failure response with status `403` (**User not allowed**) if the `token` provided in the `Authorization` header is missing, incorrect, expired, or blacklisted.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/users`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/users": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Publisher",
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns a list of registered users.",
        "description": "The endpoint returns a list of registered users.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/users`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nDepending on the requester user's `role` as determined by the `authorization token`, the behavior of this route varies:\n- **Publisher Role**: \n  - By default (`strictsearch=true`), only users with the `Admin` role are returned.\n  - By setting the query parameter `options[strictsearch]=false`:\n    - Users with role `Admin` are returned.\n    - Users with role `Publisher` are also returned, but with limited information.\n    - The full data of the requesting `Publisher` are returned.\n- **Admin Role**: All users are returned, regardless of their role.\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **dynamicSchemaValidationChain**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersThumbParam"
          },
          {
            "$ref": "#/components/parameters/FiltersWebsiteParam"
          },
          {
            "$ref": "#/components/parameters/IncludePicturesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/OptionsStrictSearchParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "users": {
                              "description": "The list of all retrieved users for the current page.<br>\nThe returned users list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/UsersDataForPrivateUsersRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - route called by `Admin`)... `/private/users`": {
                    "$ref": "#/components/examples/privateUsersNoQueryByAdmin"
                  },
                  "(no query - strictsearch default true - route called by `Publisher` id 3)... `/private/users`": {
                    "$ref": "#/components/examples/privateUsersNoQueryByPublisherStrictDefault"
                  },
                  "(one query - strictsearch false - route called by `Publisher` id 3)... `/private/users?options[strictsearch]=false`": {
                    "$ref": "#/components/examples/privateUsersByPublisherStrictFalse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/private/users?filters[ thumb]=false`": {
                    "$ref": "#/components/examples/failureGuestUsersIndex400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/private/users?filters[thumb]=false&filters[thumb]=true`": {
                    "$ref": "#/components/examples/failureGuestUsersIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/users/{id}": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Publisher",
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns the requested user's data.",
        "description": "The endpoint returns the user data for the `id` that matches the provided parameter.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/users`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nDepending on the requester user's `role` as determined by the `authorization token`, the behavior of this route varies:\n- **Publisher Role**: \n  - Regardless of the `strictsearch` setting, if the requester is querying their own data, it will always be returned.\n  - By default (`strictsearch=true`), the endpoint returns data only for a user with the `Admin` role that matches the provided `id`. If the matched id belongs to a user with a `Publisher` role, a `404` error (**user ID not found**) will be returned, even though the ID exists.\n  - By setting the query parameter `options[strictsearch]=false`, the endpoint returns the user data for any matched `id`, but with minimal information if the role is `Publisher`.\n- **Admin Role**: The data of the user whose ID matches the provided `id` parameter are returned, regardless of their `role`.\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **dynamicSchemaValidationChain**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdParam"
          },
          {
            "$ref": "#/components/parameters/IncludePicturesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/OptionsStrictSearchParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested user is returned.",
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/responses/UsersDataForPrivateUsersRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - route called by `Admin` id 1 asking for `Publisher` id 2)... `/private/users/2`": {
                    "$ref": "#/components/examples/privateUsers2NoQueryByAdmin"
                  },
                  "(no query - route called by `Admin` id 1 asking for `Admin` id 1)... `/private/users/1`": {
                    "$ref": "#/components/examples/privateUsers1NoQueryByAdmin"
                  },
                  "(no query - route called by `Publisher` id 2 asking for `Admin` id 1)... `/private/users/1`": {
                    "$ref": "#/components/examples/privateUsers1NoQueryByPublisher"
                  },
                  "(no query - route called by `Publisher` id 2 asking for `Publisher` id 2)... `/private/users/2`": {
                    "$ref": "#/components/examples/privateUsers2NoQueryByPublisherSelf"
                  },
                  "(one query - strictsearch false - route called by `Publisher` id 3 asking for `Publisher` id 2)... `/private/users/2?options[strictsearch]=false`": {
                    "$ref": "#/components/examples/privateUsers2StrictFalseByPublisher"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/private/users/2?include`": {
                    "$ref": "#/components/examples/failureGuestUsersShow400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***User ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-UserIdNotFound"
                },
                "examples": {
                  "Error 404 - User Id not found (Id exists but it is related to a role Publisher and strictsearch is true as default - called by `Publisher` id 3)... `/private/users/2`": {
                    "$ref": "#/components/examples/failurePrivateUsersShow404ForStrict"
                  },
                  "Error 404 - User Id not found (Id doesn't actually exist)... `/private/users/202`": {
                    "$ref": "#/components/examples/failureGuestUsersShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid user Id... `/private/users/0`": {
                    "$ref": "#/components/examples/failureGuestUsersShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "put": {
        "tags": [
          "Private",
          "Admin",
          "Publisher",
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the modification of data related to the token holder user.",
        "description": "This endpoint allows the registered user, regardless of their role, to partially or completely modify their registration data and also to cancel data that are nullable such as the `thumb` field (associated image file) and the `website` field (URL of their own website).<br> \nTo change the `password`, the dedicated endpoint must be used.<br> \nThe `email` field is not modifiable.<br>\nThe cancellation of the thumb and website fields is possible by providing, in the `body` of the request, the parameters `noThumb` and `noWebsite` with a `true` value, respectively.<br> \nThe presence of the `noThumb` and `noWebsite` parameters with a `true` value `takes precedence` over the possible co-presence of the `thumb` and `website` fields.<br> \nA dedicated middleware ensures that the `id` parameter specified in the URL matches the actual id of the `token holder` to prevent a user from modifying data related to another user.<br> \nOnce the `id` parameter is validated, the aforementioned middleware ensures, in case of a favorable response, that the provided id exists, which is why this endpoint does not throw a `404 error`.<br>\nIf the data modification is successful, **the user is logged again**, the new `token` is issued while the previous one is moved to a **blacklist** to prevent further use.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/users`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **imageUploader**\n- **validationMiddleware**\n- **validateUserIdMatch**\n- **cascadeUserUpdateValidators**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/Update"
              },
              "examples": {
                "Just removing website and thumb (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserRemovingWebsiteAndThumbExample"
                },
                "Changing name and removing Thumb (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserChangingNameAndRemovingThumbExample"
                },
                "Just changing website (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserChangingWebsiteExample"
                },
                "Changing thumb and other data - with conflict on website - (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/UpdateUserChangingThumbAndOtherDataWithWebsiteConflictExample"
                },
                "Changing thumb with conflict (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/UpdateUserChangingThumbWithConflictExample"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/Update"
              },
              "examples": {
                "Just removing website and thumb (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserRemovingWebsiteAndThumbExample"
                },
                "Changing name and removing Thumb (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserChangingNameAndRemovingThumbExample"
                },
                "Just changing website (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserChangingWebsiteExample"
                },
                "Changing thumb and other data - with conflict on website - (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/UpdateUserChangingThumbAndOtherDataWithWebsiteConflictExample"
                },
                "Changing thumb with conflict (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/UpdateUserChangingThumbWithConflictExample"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/UpdateWithThumb"
              },
              "examples": {
                "Just removing website and thumb (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserRemovingWebsiteAndThumbExample"
                },
                "Changing name and removing Thumb (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserChangingNameAndRemovingThumbExample"
                },
                "Just changing website (all Content-Types)": {
                  "$ref": "#/components/examples/UpdateUserChangingWebsiteExample"
                },
                "Changing thumb and other data - with conflict on website - (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/UpdateUserChangingThumbAndOtherDataWithWebsiteConflictExample"
                },
                "Changing thumb with conflict (only with Content-Type multipart/form-data)": {
                  "$ref": "#/components/examples/UpdateUserChangingThumbWithConflictExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "***The user data modification was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The user data pre-modification and post-modification, along with the new token, are returned.",
                          "type": "object",
                          "properties": {
                            "previous": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/UsersCompleteData"
                                },
                                {
                                  "type": "object",
                                  "description": "User data pre-modification."
                                }
                              ]
                            },
                            "updated": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/UsersCompleteData"
                                },
                                {
                                  "type": "object",
                                  "description": "User data post-modification."
                                }
                              ]
                            },
                            "token": {
                              "type": "string",
                              "description": "The new JWT Authentication token"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Step 1 - Adding thumb and website to an existing user": {
                    "$ref": "#/components/examples/privateUsersUpdate_1"
                  },
                  "Step 2 - Cancellation of the website and modification of the thumb with a new image file": {
                    "$ref": "#/components/examples/privateUsersUpdate_2"
                  },
                  "Step 3 - Name modification along with tentative to modify the thumb with a not allowed file (the previous thumb will be kept)": {
                    "$ref": "#/components/examples/privateUsersUpdate_3"
                  },
                  "Step 4 - Cancellation of the thumb along with modifying the name (back to Step 1 data)": {
                    "$ref": "#/components/examples/privateUsersUpdate_4"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-UserIdMatchError"
                        },
                        {
                          "description": null
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - Id from Authorization token doean't match Id param": {
                    "$ref": "#/components/examples/failurePrivateUsersIDMatch"
                  }
                }
              }
            }
          },
          "415": {
            "description": "***Image wrong field name***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError415"
                    },
                    {
                      "title": "Error 415 - Image field name is wrong"
                    }
                  ]
                },
                "examples": {
                  "Error 415 - Wrong field name": {
                    "$ref": "#/components/examples/failureAuthSignUp415"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid user Id... `/private/users/0`": {
                    "$ref": "#/components/examples/failureGuestUsersShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "delete": {
        "tags": [
          "Private",
          "Admin",
          "Publisher",
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the deletion from the database of the user who holds the authorization token.",
        "description": "This endpoint facilitates the deletion of a user account.<br> \nLike the `PUT` method (modify user account), this `DELETE` method uses a specific middleware to ensure that no user can delete another's account while also preventing a `404 error`.\n- If the user's role is `Publisher`, they will be removed from the database along with all their `pictures`.\n- If the user's role is `Admin`, deletion is contingent on not being the sole Admin in the database. If they are the only Admin, the operation will be rejected with a specific error. Otherwise, the deletion proceeds successfully, and all `categories` associated with them will be reassigned to another Admin.<br>\nUpon successful operation, the user's token is moved to a **blacklist** to prevent further use.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/users`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n- **validateUserIdMatch**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The user account was successfully deleted.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "All data related to the recently deleted user, including their pictures which were also removed, are returned.",
                          "type": "object",
                          "properties": {
                            "user": {
                              "$ref": "#/components/responses/DeletedUser"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Publisher deletion with all their pictures": {
                    "$ref": "#/components/examples/privateUsersPublisherDeletedWithPictures"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-UserIdMatchError"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-AdminDeletionRefused"
                        },
                        {
                          "description": null
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - Id from Authorization token doean't match Id param": {
                    "$ref": "#/components/examples/failurePrivateUsersIDMatch"
                  },
                  "Error 403 - The unique Admin cannot be deleted": {
                    "$ref": "#/components/examples/failurePrivateUsersUniqueAdminDeletion"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid user Id... `/private/users/0`": {
                    "$ref": "#/components/examples/failureGuestUsersShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/users/{id}/changepassword": {
      "put": {
        "tags": [
          "Private",
          "Admin",
          "Publisher",
          "Users"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the user holding the provided token to change their password",
        "description": "Similarly to the `/private/users/:id` endpoint (`PUT` and `DELETE` methods), this endpoint uses appropriate middleware to ensure that no user can change another user's password, while at the same time not triggering any `404` error (**user ID not found**). However, it can still throw a `404` error (**user not found**) if the provided `email` is not located in the database, thus preventing the identification of the account.<br>\nThe new password, in addition to being valid in terms of format, must match the `confirm` value and must be different from the previous one.<br>\nIf the password modification is successful, **the user is logged again**, the new `token` is issued while the previous one is moved to a **blacklist** to prevent further use.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/users`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=users`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n- **validateUserIdMatch**\n- **cascadePasswordsValidators**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/IdParam"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/ChangePassword"
              },
              "examples": {
                "Password change": {
                  "$ref": "#/components/examples/ChangePasswordExample"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/ChangePassword"
              },
              "examples": {
                "Password change": {
                  "$ref": "#/components/examples/ChangePasswordExample"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/ChangePassword"
              },
              "examples": {
                "Password change": {
                  "$ref": "#/components/examples/ChangePasswordExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "***The password was successfully changed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The userId and the new token are returned.",
                          "type": "object",
                          "properties": {
                            "userId": {
                              "description": null,
                              "type": "integer"
                            },
                            "token": {
                              "type": "string",
                              "description": null
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Password successfully changed": {
                    "$ref": "#/components/examples/privateUsersPasswordChanged"
                  }
                }
              }
            }
          },
          "401": {
            "description": "***Invalid password***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError401-InvalidPassword"
                },
                "examples": {
                  "Error 401 - Invalid password": {
                    "$ref": "#/components/examples/failureAuthLogInInvalidPassword401"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-UserIdMatchError"
                        },
                        {
                          "description": null
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - Id from Authorization token doean't match Id param": {
                    "$ref": "#/components/examples/failurePrivateUsersIDMatch"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***User not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-UserNotFound"
                },
                "examples": {
                  "Error 404 - User not found": {
                    "$ref": "#/components/examples/failureAuthLogIn404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Error on password validation": {
                    "$ref": "#/components/examples/failurePrivateUsersChangePassword_1"
                  },
                  "Error 422 - The new password is the same as the previous password": {
                    "$ref": "#/components/examples/failurePrivateUsersChangePassword_2"
                  },
                  "Error 422 - The field `confirmNew` is missing": {
                    "$ref": "#/components/examples/failurePrivateUsersChangePassword_3"
                  },
                  "Error 422 - The field `confirmNew` doesn't match the new password": {
                    "$ref": "#/components/examples/failurePrivateUsersChangePassword_4"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/publisher/pictures/allowedQueries": {
      "get": {
        "tags": [
          "Private",
          "Publisher",
          "Pictures",
          "Info/Basics/Queries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/private/publisher/pictures`.",
        "description": "The `/private/publisher/pictures/allowedQueries` endpoint provides the following responses:\n- A successful response with status `200`.\n- A failure response with status `403` (**User not allowed**) if the token provided in the `Authorization` header is missing, incorrect, expired, or blacklisted.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/publisher/pictures": {
      "get": {
        "tags": [
          "Private",
          "Publisher",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns a list of pictures owned by the Publisher holding the token.",
        "description": "The endpoint returns a list of pictures owned by the Publisher holding the token.<br>\nPublishers may request a list of all pictures, regardless of ownership, via the public route `/guest/pictures`.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersTitleTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersDescriptionTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/FiltersVisibleParam"
          },
          {
            "$ref": "#/components/parameters/IncludeCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "All requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "pictures": {
                              "description": "The list of all retrieved pictures for the current page.<br>\nThe returned pictures list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/PicturesDataForPrivatePublisherPicturesRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - escapetext default false - Publisher's ID is 3)... `/private/publisher/pictures`": {
                    "$ref": "#/components/examples/privatePublisher-3-PicturesNoQuery"
                  },
                  "(one query - escapetext true - Publisher's ID is 3)... `/private/publisher/pictures?options[escapetext]=true`": {
                    "$ref": "#/components/examples/privatePublisher-3-PicturesEscapeTextTrue"
                  },
                  "(more queries - using filters[visible] - Publisher's ID is 3)... `/private/publisher/pictures?filters[visible]=false&include[categories]=complete`": {
                    "$ref": "#/components/examples/privatePublisher-3-PicturesMore"
                  },
                  "(more queries - using more filters - Publisher's ID is 3)...`/private/publisher/pictures?filters[visible]=true&include[categories]=complete&filters[categories]=or,6,7`": {
                    "$ref": "#/components/examples/privatePublisher-3-PicturesMany"
                  },
                  "(more queries - using more filters - no results - Publisher'S ID is 3)...`/private/publisher/pictures?filters[visible]=true&filters[categories]=or,6,7&filters[titletext]=moon`": {
                    "$ref": "#/components/examples/privatePublisher-3-PicturesNoResults"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/private/publisher/pictures?include(categories)=complete`": {
                    "$ref": "#/components/examples/failurePublisherPicturesIndex400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/private/publisher/pictures?filters[visible]=5`": {
                    "$ref": "#/components/examples/failurePublisherPicturesIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "post": {
        "tags": [
          "Private",
          "Publisher",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the Publisher holding the token, to create a picture record associated with them, complete with image file and data.",
        "description": "This endpoint allows the `Publisher` to create a new `picture` record.<br> \nThe mandatory data are the `title` and the `image` file, and the required `Content-Type` is `multipart/form-data`.<br> \nOptional fields include the `description` field, the `visible` field (`false` by default), and the array of associated `categories` (array made up of IDs of existing categories).<br> \n**Unlike categories, two or more pictures can have the same title.**<br>\nThe new record is automatically associated with the Publisher via the `ownerId` key set to the value of the Publisher's ID, extracted from the authorization `token` provided in `headers.Authorization`.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **imageUploader**\n- **validationMiddleware**\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/NewPicture"
              },
              "examples": {
                "New picture with required data, optional data and default data (`visible` = false)": {
                  "$ref": "#/components/examples/NewPictureExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "***Picture successfully created.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "Complete data for the newly created picture are returned.",
                          "type": "object",
                          "properties": {
                            "picture": {
                              "$ref": "#/components/responses/PicturesDataForPrivatePublisherPicturesPOSTRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Successful creation of a new picture": {
                    "$ref": "#/components/examples/privatePublisherPicturesStore"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed or Operation refused by db.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Refused"
                        },
                        {
                          "description": null
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Category IDs not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                },
                "examples": {
                  "Error 404 - Category Ids not found": {
                    "$ref": "#/components/examples/failurePublisherPicturesCategories404"
                  }
                }
              }
            }
          },
          "415": {
            "description": "***Image file upload failure***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError415"
                },
                "examples": {
                  "Error 415 - Invalid file type": {
                    "$ref": "#/components/examples/failurePublisherPictures415-1"
                  },
                  "Error 415 - Invalid file extension": {
                    "$ref": "#/components/examples/failurePublisherPictures415-2"
                  },
                  "Error 415 - Image file is required": {
                    "$ref": "#/components/examples/failurePublisherPictures415-3"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Picture title too short": {
                    "$ref": "#/components/examples/failurePublisherPicturesPOST422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/publisher/pictures/{id}": {
      "get": {
        "tags": [
          "Private",
          "Publisher",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns the requested picture",
        "description": "The requested `picture` (whose `ID` matches the `id` parameter in the URL), if existing, is returned provided that it is **owned by the requesting Publisher** (the `ownerId` field of the picture must match the `ID` derived from the `authorization token`).<br>\nAccording to the endpoint's behavior, a request for a picture with an existing ID that does not belong to the requester will result in a `404` error (**picture Id not found**).<br>\nPublishers may request a picture, regardless of ownership, via the public route `/guest/pictures/:id`.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `pictureId` identifying the searched `picture`."
              }
            ]
          },
          {
            "$ref": "#/components/parameters/IncludeCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested picture is returned.",
                          "type": "object",
                          "properties": {
                            "picture": {
                              "$ref": "#/components/responses/PicturesDataForPrivatePublisherPicturesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query)... `/private/publisher/pictures/3`": {
                    "$ref": "#/components/examples/PublisherPictures3NoQuery"
                  },
                  "(one query)... `/private/publisher/pictures/3?include[categories]=count`": {
                    "$ref": "#/components/examples/PublisherPictures3Query"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/private/publisher/pictures/5?[categories]=none`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Picture ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-PictureIdNotFound"
                },
                "examples": {
                  "Error 404 - Picture Id not found (Id exists but the picture doesn't belong to the requester Publisher)... `/private/publisher/pictures/1`": {
                    "$ref": "#/components/examples/failurePublisherPictures1Show404"
                  },
                  "Error 404 - Picture Id not found (Id doesn't actually exist)... `/private/publisher/pictures/73`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid picture Id... `/private/publisher/pictures/a`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "put": {
        "tags": [
          "Private",
          "Publisher",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the Publisher to edit the data of their own picture",
        "description": "The endpoint allows the `Publisher`, holder of the `authorization token`, to modify the data related to a picture of their ownership, concerning all fields, except for the image file.<br>\n**Important**: regarding the fields `title`, `description`, and `visible`, the old data will be retained where no new data is provided; as for the `categories` field, the absence of this field results in the removal of all `categories` previously associated with the `picture`. Consequently, if it is intended to maintain the association of the `picture` with the previously associated `categories`, they must be explicitly indicated by redefining the `categories` field.<br>\nAccording to the endpoint's behavior, a request for a picture with an existing ID that does not belong to the requester will result in a `403` error (**User not allowed**).\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `pictureId` identifying the searched `picture`."
              }
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/PictureUpdate"
              },
              "examples": {
                "Fields `visible` and `categories` update (all Content-Types)": {
                  "$ref": "#/components/examples/PictureUpdateExample"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/PictureUpdate"
              },
              "examples": {
                "Fields `visible` and `categories` update (all Content-Types)": {
                  "$ref": "#/components/examples/PictureUpdateExample"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/PictureUpdate"
              },
              "examples": {
                "Fields `visible` and `categories` update (all Content-Types)": {
                  "$ref": "#/components/examples/PictureUpdateExample"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "***The picture update operation was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The picture data pre-modification and post-modification are returned.",
                          "type": "object",
                          "properties": {
                            "previous": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/PicturesDataForPrivatePublisherPicturesPOSTRoute"
                                },
                                {
                                  "type": "object",
                                  "description": "All picture data pre-modification."
                                }
                              ]
                            },
                            "updated": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/PicturesDataForPrivatePublisherPicturesPOSTRoute"
                                },
                                {
                                  "type": "object",
                                  "description": "All picture data post-modification."
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(Step 1 - on picture 7, owned by Publisher 2, changing `visible` and keeping `categories`)": {
                    "$ref": "#/components/examples/privatePublisherPictures7Update-1"
                  },
                  "(Step 2 - on picture 7, owned by Publisher 2, changing `description` and `title` and setting `categories` to none)": {
                    "$ref": "#/components/examples/privatePublisherPictures7Update-2"
                  },
                  "(Step 3 - on picture 7, owned by Publisher 2, back to Step 1 data)": {
                    "$ref": "#/components/examples/privatePublisherPictures7Update-3"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-PublisherIdMatchError"
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - Requester Publisher is not the picture's owner": {
                    "$ref": "#/components/examples/failurePublisherPicturesNotOwner-1"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Resource not found***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/responses/ResponseError404-PictureIdNotFound"
                    },
                    {
                      "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                    }
                  ]
                },
                "examples": {
                  "Error 404 - Picture Id not found (Id doesn't actually exist)... `/private/publisher/pictures/73`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow404"
                  },
                  "Error 404 - Category Ids not found": {
                    "$ref": "#/components/examples/failurePublisherPicturesCategories404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid data into request.body": {
                    "$ref": "#/components/examples/failurePublisherPicturesPUT422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "delete": {
        "tags": [
          "Private",
          "Publisher",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the Publisher to delete their own picture",
        "description": "The endpoint allows the `Publisher`, holder of the `authorization token`, to delete the picture of their ownership.<br>\nAccording to the endpoint's behavior, a request for a picture with an existing ID that does not belong to the requester will result in a `403` error (**User not allowed**).\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---        \n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `pictureId` identifying the searched `picture`."
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "***The picture was successfully deleted.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": null,
                          "type": "object",
                          "properties": {
                            "picture": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/PicturesDataForPrivatePublisherPicturesDeleteRoute"
                                },
                                {
                                  "type": "object",
                                  "description": "The deleted picture's data (without the `categories` field)."
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(picture 7, owned by Publisher 2)": {
                    "$ref": "#/components/examples/PublisherPicturesDelete"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-PublisherIdMatchError"
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - Requester Publisher is not the picture's owner": {
                    "$ref": "#/components/examples/failurePublisherPicturesNotOwner-2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Picture not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-PictureIdNotFound"
                },
                "examples": {
                  "Error 404 - Picture Id not found (Id doesn't actually exist)... `/private/publisher/pictures/73`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid picture Id... `/private/publisher/pictures/a`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/publisher/categories/allowedQueries": {
      "get": {
        "tags": [
          "Private",
          "Publisher",
          "Categories",
          "Info/Basics/Queries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/private/publisher/categories`.",
        "description": "The `/private/publisher/categories/allowedQueries` endpoint provides the following responses:\n- A successful response with status `200`.\n- A failure response with status `403` (**User not allowed**) if the token provided in the `Authorization` header is missing, incorrect, expired, or blacklisted.<br>\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/publisher/categories": {
      "get": {
        "tags": [
          "Private",
          "Publisher",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns a list of categories",
        "description": "The endpoint returns a list of categories.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nUnlike the `/users` and `/pictures` endpoints, the `/categories` endpoint does not accept the following query parameters:\n- Query parameter `include`:<br>\n  This parameter is designed to provide nested information at lower levels (for example, information related to pictures or categories for searches on users, or information related to categories for searches on pictures). Since categories are at the lowest level (i.e., they do not have further nested information), they cannot provide more detailed information.\n- Query parameter `options`:<br>\n  In the current version, this parameter is used to return sanitized texts against **HTML injections** through the `EscapeText` key and to allow more flexible data access with the `StrictSearch` key (if set to `false`). However, the textual data (`names`) of the categories, consisting only of letters and spaces, do not present a risk of **HTML injections**, and since categories do not contain **protected elements**, neither the `EscapeText` nor the `StrictSearch` keys are relevant here. Consequently, this applies to the entire `options` query parameter in the **current version** of the API.\n---\nIn the absence of the `filters[used]` parameter, the current route behaves exactly the same way as the public route `/guest/categories`, with the only difference being the fields returned for each category.<br> \nThe use of the `filters[used]` parameter, depending on its boolean value, narrows down the `categories` returned based on their usage or non-usage by the `Publisher` (for more details, consult the section on accepted parameters).\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersSlugTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersUsedParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "categories": {
                              "description": "The list of all retrieved categories for the current page.<br>\nThe returned categories list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/CategoriesDataForPublisherCategoriesRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query - Publisher's ID is 2)... `/private/publisher/categories`": {
                    "$ref": "#/components/examples/publisherCategoriesNoQuery"
                  },
                  "(one query - filters[used]=true - Publisher's ID is 2)... `/private/publisher/categories?filters[used]=true`": {
                    "$ref": "#/components/examples/publisherCategoriesUsedTrue"
                  },
                  "(one query - filters[used]=false - Publisher's ID is 2)... `/private/publisher/categories?filters[used]=false`": {
                    "$ref": "#/components/examples/publisherCategoriesUsedFalse"
                  },
                  "(more queries - filters[used] and filters[slugtext] - Publisher's ID is 2)... `/private/publisher/categories?filters[used]=false&filters[slugtext]=the-`": {
                    "$ref": "#/components/examples/publisherCategoriesMore"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/private/publisher/categories? paging[itemsperpage]=5`": {
                    "$ref": "#/components/examples/failureGuestCategoriesIndex400"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query parameter... `/private/publisher/categories?filters[slugtext]=4`": {
                    "$ref": "#/components/examples/failureGuestCategoriesIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/publisher/categories/{id}": {
      "get": {
        "tags": [
          "Private",
          "Publisher",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns the requested category's data",
        "description": "The endpoint returns the category data for the `id` that matches the provided parameter.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/publisher/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=publisher`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe `/private/publisher/categories/:id` endpoint does not accept any query parameters (**in the current version of the API**).<br> \nSimilar to the `/users/:id` and `/pictures/:id` endpoints, the `paging` and `filters` query parameters would not make sense.<br> \nUnlike the aforementioned endpoints, but similar to the `/private/publisher/categories` endpoint, it does not accept the `options` and `include` query parameters for the reasons mentioned in that endpoint.\n---\nThe `/private/publisher/categories` endpoint behaves exactly the same as the public `/guest/categories` endpoint, except for the fields returned in the category record.\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `categoryId` identifying the searched `category`."
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested category is returned.",
                          "type": "object",
                          "properties": {
                            "category": {
                              "$ref": "#/components/responses/CategoriesDataForPublisherCategoriesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "/private/publisher/categories/1": {
                    "$ref": "#/components/examples/publisherCategoriesShow"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Category ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                },
                "examples": {
                  "Error 404 - Category Id not found... `/private/publisher/categories/14`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid category Id... `/private/publisher/categories/3.5`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/admin/pictures/allowedQueries": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Pictures",
          "Info/Basics/Queries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/private/admin/pictures`.",
        "description": "The `/private/admin/pictures/allowedQueries` endpoint provides the following responses:\n- A successful response with status `200`.\n- A failure response with status `403` (**User not allowed**) if the token provided in the `Authorization` header is missing, incorrect, expired, or blacklisted.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/admin/pictures": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns a list of pictures.",
        "description": "The `/private/admin/pictures` route is definitely the most performant among all the endpoints in the `pictures` family.<br> \nIt is exclusively usable by users with an `Admin role` and combines all the search filters available from the `/guest/pictures` and `/private/publisher/pictures` routes, in addition to the remaining query parameters.\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nThe endpoints in the `Admin` family do not use the `options[strictsearch]` query parameter because **Admin users have the highest level of access** to the information of all users (except for the `password`), all pictures, and all categories.   \n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersTitleTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersDescriptionTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/FiltersVisibleParam"
          },
          {
            "$ref": "#/components/parameters/FiltersPublisherParamForFamilyPictures"
          },
          {
            "$ref": "#/components/parameters/IncludeCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "All requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "pictures": {
                              "description": "The list of all retrieved pictures for the current page.<br>\nThe returned pictures list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/PicturesDataForPrivateAdminPicturesRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query)... `/private/admin/pictures`": {
                    "$ref": "#/components/examples/adminPicturesNoQuery"
                  },
                  "(one query - include[categories])... `/private/admin/pictures?include[categories]=complete`": {
                    "$ref": "#/components/examples/adminPicturesInclude"
                  },
                  "(more queries - using filters[visible] and filters[publisher])... `/private/admin/pictures?filters[visible]=false&filters[publisher]=3`": {
                    "$ref": "#/components/examples/adminPicturesMore-1"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/private/admin/pictures?include(categories)=complete`": {
                    "$ref": "#/components/examples/failurePublisherPicturesIndex400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query... `/private/admin/pictures?filters[visible]=5`": {
                    "$ref": "#/components/examples/failurePublisherPicturesIndex422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/admin/pictures/{id}": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns the requested picture's data.",
        "description": "The endpoint returns the **complete** picture's data for the `id` that matches the provided parameter.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=include`<br><br>\n- `/info/apiqueries?queryparam[info]=options`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nThe endpoints in the `Admin` family do not use the `options[strictsearch]` query parameter because **Admin users have the highest level of access** to the information of all users (except for the `password`), all pictures, and all categories.   \n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `pictureId` identifying the searched `picture`."
              }
            ]
          },
          {
            "$ref": "#/components/parameters/IncludeCategoriesParam"
          },
          {
            "$ref": "#/components/parameters/OptionsEscapeTextParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested picture is returned.",
                          "type": "object",
                          "properties": {
                            "picture": {
                              "$ref": "#/components/responses/PicturesDataForPrivateAdminPicturesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query)... `/private/admin/pictures/2`": {
                    "$ref": "#/components/examples/adminPicturesShowNoQuery"
                  },
                  "(one query)... `/private/admin/pictures/2?include[categories]=count`": {
                    "$ref": "#/components/examples/adminPicturesShowInclude"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query syntax error... `/private/admin/pictures/5?[categories]=none`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Picture ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-PictureIdNotFound"
                },
                "examples": {
                  "Error 404 - Picture Id not found... `/private/admin/pictures/73`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid picture Id... `/private/admin/pictures/a`": {
                    "$ref": "#/components/examples/failureGuestPicturesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/admin/pictures/visibility/publisher/{publisherId}/allPictures/{visibility}": {
      "put": {
        "tags": [
          "Private",
          "Admin",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows making all the pictures of a specific Publisher visible or invisible",
        "description": "This endpoint, accessible only to users with an `Admin role`, allows for a **moderation action** on all `pictures` owned by a specific `Publisher`, making them all `visible` or invisible to **guest** users (unregistered).\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `userId` identifying the `Publisher` whose pictures' visibility is to be set or reset."
              },
              {
                "name": "publisherId"
              }
            ]
          },
          {
            "$ref": "#/components/parameters/VisibilityParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The operation was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "Empty object."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(change visibility (on) for all pictures owned by Publisher with ID 4)... `/private/admin/pictures/visibility/publisher/4/allPictures/on`": {
                    "$ref": "#/components/examples/changeVisibility"
                  },
                  "(change visibility (off) for all pictures owned by Publisher with ID 4)... `/private/admin/pictures/visibility/publisher/4/allPictures/off`": {
                    "$ref": "#/components/examples/changeVisibility"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error 403.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/responses/ResponseError403-UserIsNotPublisher"
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - The user is not a Publisher": {
                    "$ref": "#/components/examples/failureChangeVisibility403-1"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Publisher ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-PublisherIdNotFound"
                },
                "examples": {
                  "Error 404 - Publisher Id not found... `/private/admin/pictures/visibility/publisher/11/allPictures/on`": {
                    "$ref": "#/components/examples/failureChangeVisibility404-1"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (params)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid Publisher Id... `/private/admin/pictures/visibility/publisher/galileo/allPictures/on`": {
                    "$ref": "#/components/examples/failureChangeVisibility422-1"
                  },
                  "Error 422 - Invalid visibility param... `/private/admin/pictures/visibility/publisher/4/allPictures/true`": {
                    "$ref": "#/components/examples/failureChangeVisibility422-2"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/admin/pictures/visibility/publisher/{publisherId}/picture/{pictureId}/{visibility}": {
      "put": {
        "tags": [
          "Private",
          "Admin",
          "Pictures"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows making a picture of a specific Publisher visible or invisible",
        "description": "This endpoint, accessible only to users with an `Admin role`, allows for a **moderation action** on a single `picture` owned by a specific `Publisher`, making it `visible` or invisible to **guest** users (unregistered).\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/pictures`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=pictures`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `userId` identifying the `Publisher` whose picture visibility is to be set or reset."
              },
              {
                "name": "publisherId"
              }
            ]
          },
          {
            "pictureIdParam": null,
            "name": "pictureId",
            "in": "path",
            "description": "The `pictureId` identifying the searched `picture`.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32",
              "minimum": 1
            }
          },
          {
            "$ref": "#/components/parameters/VisibilityParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The operation was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "Empty object."
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(change visibility (on) for a picture with ID 3 owned by Publisher with ID 4)... `/private/admin/pictures/visibility/publisher/4/picture/3/on`": {
                    "$ref": "#/components/examples/changeVisibility"
                  },
                  "(change visibility (off) for a picture with ID 3 owned by Publisher with ID 4)... `/private/admin/pictures/visibility/publisher/4/picture/3/off`": {
                    "$ref": "#/components/examples/changeVisibility"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error 403.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "$ref": "#/components/responses/ResponseError403-UserIsNotPublisher"
                    },
                    {
                      "$ref": "#/components/responses/ResponseError403-PublisherIsNotOwner"
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  },
                  "Error 403 - The user is not a Publisher": {
                    "$ref": "#/components/examples/failureChangeVisibility403-1"
                  },
                  "Error 403 - The Publisher is not the owner of the picture": {
                    "$ref": "#/components/examples/failureChangeVisibility403-2"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Publisher ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-PublisherIdNotFound"
                },
                "examples": {
                  "Error 404 - Publisher Id not found... `/private/admin/pictures/visibility/publisher/11/picture/4/on`": {
                    "$ref": "#/components/examples/failureChangeVisibility404-1"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (params)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid Publisher Id... `/private/admin/pictures/visibility/publisher/galileo/picture/4/on`": {
                    "$ref": "#/components/examples/failureChangeVisibility422-1"
                  },
                  "Error 422 - Invalid visibility param... `/private/admin/pictures/visibility/publisher/4/picture/5/true`": {
                    "$ref": "#/components/examples/failureChangeVisibility422-2"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/admin/categories/allowedQueries": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Categories",
          "Info/Basics/Queries"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns basic information about all the query parameters accepted by the route `/private/admin/categories`.",
        "description": "The `/private/admin/categories/allowedQueries` endpoint provides the following responses:\n- A successful response with status `200`.\n- A failure response with status `403` (**User not allowed**) if the token provided in the `Authorization` header is missing, incorrect, expired, or blacklisted.<br>\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n",
        "responses": {
          "200": {
            "$ref": "#/components/responses/ResponseAllowedQueries"
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/private/admin/categories": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns a list of categories",
        "description": "The endpoint returns a list of categories.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe endpoint accepts a series of `case-insensitive` query parameters in bracket notation.<br>\nFor detailed information:\n- `/info/apiqueries?queryparam[info]=filters`<br><br>\n- `/info/apiqueries?queryparam[info]=paging`<br><br>\n- `/info/apiqueries?queryparam[info]=all`<br><br>\n\n---\nUnlike the `/users` and `/pictures` endpoints, the `/categories` endpoint does not accept the following query parameters:\n- Query parameter `include`:<br>\n  This parameter is designed to provide nested information at lower levels (for example, information related to pictures or categories for searches on users, or information related to categories for searches on pictures). Since categories are at the lowest level (i.e., they do not have further nested information), they cannot provide more detailed information.\n- Query parameter `options`:<br>\n  In the current version, this parameter is used to return sanitized texts against **HTML injections** through the `EscapeText` key and to allow more flexible data access with the `StrictSearch` key (if set to `false`). However, the textual data (`names`) of the categories, consisting only of letters and spaces, do not present a risk of **HTML injections**, and since categories do not contain **protected elements**, neither the `EscapeText` nor the `StrictSearch` keys are relevant here. Consequently, this applies to the entire `options` query parameter in the **current version** of the API.\n---\nIn the absence of the `filters[used]` and `filters[publisher]` parameters, the current route behaves exactly the same way as the public route `/guest/categories`, with the only difference being the fields returned for each category.<br> \nThe `filters[used]` and `filters[publisher]` parameters can be used individually or in combination to narrow down the categories returned. Depending on their boolean values, these filters refine results based on usage or non-usage. For more details, consult the section on accepted parameters.\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **queryBracketNotationCaseIns**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/FiltersSlugTextParam"
          },
          {
            "$ref": "#/components/parameters/FiltersPublisherParamForFamilyCategories"
          },
          {
            "$ref": "#/components/parameters/FiltersUsedParam"
          },
          {
            "$ref": "#/components/parameters/FiltersAdminParam"
          },
          {
            "$ref": "#/components/parameters/PagingCurrentParam"
          },
          {
            "$ref": "#/components/parameters/PagingItemsPerPageParam"
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested data are returned along with `paging` information and the applied `filters`.",
                          "type": "object",
                          "properties": {
                            "categories": {
                              "description": "The list of all retrieved categories for the current page.<br>\nThe returned categories list is consistent with all query parameters, if provided.\n",
                              "type": "array",
                              "items": {
                                "$ref": "#/components/responses/CategoriesDataForAdminCategoriesRoute"
                              }
                            },
                            "pagingInfo": {
                              "$ref": "#/components/schemas/PagingInfoSchema"
                            },
                            "filters": {
                              "description": "An object containing all allowed filters provided by the caller and used in the search.<br>\nIf no filters are provided, this will be an empty object.\n"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(no query)... `/private/admin/categories`": {
                    "$ref": "#/components/examples/adminCategoriesIndexNoQuery"
                  },
                  "(one query - filters[admin])... `/private/admin/categories?filters[admin]=5`": {
                    "$ref": "#/components/examples/adminCategoriesIndexAdminQuery"
                  },
                  "(one query - filters[publisher] - filters[used]=true by default)... `/private/admin/categories?filters[publisher]=3`": {
                    "$ref": "#/components/examples/adminCategoriesIndexPublisherQuery"
                  },
                  "(more queries - filters[publisher] - filters[used]=false)... `/private/admin/categories?filters[publisher]=3&filters[used]=false`": {
                    "$ref": "#/components/examples/adminCategoriesIndexMore-1"
                  },
                  "(more queries)... `/private/admin/categories?filters[publisher]=3&filters[used]=false&filters[admin]=1`": {
                    "$ref": "#/components/examples/adminCategoriesIndexMore-2"
                  },
                  "(one query - filters[used]=true)... `/private/admin/categories?filters[used]=true`": {
                    "$ref": "#/components/examples/adminCategoriesIndexUsedQuery"
                  },
                  "(one query - filters[used]=false)... `/private/admin/categories?filters[used]=false`": {
                    "$ref": "#/components/examples/adminCategoriesIndexUsedFalse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "***Query error***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError400"
                },
                "examples": {
                  "Error 400 - Query parameter syntax error... `/private/admin/categories?filters(used)`": {
                    "$ref": "#/components/examples/failureAdminCategories400"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (query)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Inconsistent query parameter... `/private/admin/categories?filters[publisher]=galileo`": {
                    "$ref": "#/components/examples/failureAdminCategories422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "post": {
        "tags": [
          "Private",
          "Admin",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows to create a new category",
        "description": "This endpoint allows a user with the `Admin role` to create a new category.<br> \nThe creation of the category requires two mandatory fields: the `name` field and the `thumb` field, and the `Content-Type` must be `multipart/form-data`.<br> \nThe `name` field, in addition to adhering to a specific format, **must also be unique in terms of slug among the categories**, which means that, for example, two categories with names that differ only in case (uppercase/lowercase) are not allowed.<br> \nIf the creation is successful, the `ownerId` column of the newly created category will contain the ID of the `Admin` who created it.        \n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **imageUploader**\n- **validationMiddleware**\n",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/NewCategory"
              },
              "examples": {
                "New category": {
                  "$ref": "#/components/examples/NewCategoryExample"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "***Category successfully created.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "Complete data for the newly created category are returned.",
                          "type": "object",
                          "properties": {
                            "category": {
                              "$ref": "#/components/responses/CategoriesDataForAdminCategoriesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Successful creation of a new category": {
                    "$ref": "#/components/examples/privateAdminCategoriesStore"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***User not allowed or Operation refused by db.***",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Authorization"
                        },
                        {
                          "title": "Error 403 (Missing or invalid Authorization token)"
                        },
                        {
                          "description": null
                        }
                      ]
                    },
                    {
                      "allOf": [
                        {
                          "$ref": "#/components/responses/ResponseError403-Refused"
                        },
                        {
                          "description": null
                        }
                      ]
                    }
                  ]
                },
                "examples": {
                  "Error 403 - Invalid Authorization token": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "409": {
            "description": "***Invalid name (slug already existing)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError409-InvalidSlug"
                },
                "examples": {
                  "Error 409": {
                    "$ref": "#/components/examples/failureAdminCategoriesSlug409"
                  }
                }
              }
            }
          },
          "415": {
            "description": "***Image file upload failure***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError415"
                },
                "examples": {
                  "Error 415 - Invalid file type": {
                    "$ref": "#/components/examples/failureAdminCategories415-1"
                  },
                  "Error 415 - Invalid file extension": {
                    "$ref": "#/components/examples/failureAdminCategories415-2"
                  },
                  "Error 415 - Image file is required": {
                    "$ref": "#/components/examples/failurePublisherPictures415-3"
                  },
                  "Error 415 - Invalid file size": {
                    "$ref": "#/components/examples/failureAdminCategories415-3"
                  },
                  "Error 415 - Invalid Content-Type": {
                    "$ref": "#/components/examples/failureAdminCategoriesCType"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (data or file)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid category name": {
                    "$ref": "#/components/examples/failureAdminCategoriesPOST422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    },
    "/private/admin/categories/{id}": {
      "get": {
        "tags": [
          "Private",
          "Admin",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Returns the requested category",
        "description": "The requested `category` (whose `ID` matches the `id` parameter in the URL), if existing, is returned.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\nThe `/private/admin/categories/:id` endpoint does not accept any query parameters (**in the current version of the API**).<br> \nSimilar to the `/users/:id` and `/pictures/:id` endpoints, the `paging` and `filters` query parameters would not make sense.<br> \nUnlike the aforementioned endpoints, but similar to the `/private/admin/categories` endpoint, it does not accept the `options` and `include` query parameters for the reasons mentioned in that endpoint.\n---\nThe `/private/admin/categories` endpoint behaves exactly the same as the public `/guest/categories` endpoint, except for the fields returned in the category record.\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `categoryId` identifying the searched `category`."
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "***The search was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The requested category is returned.",
                          "type": "object",
                          "properties": {
                            "category": {
                              "$ref": "#/components/responses/CategoriesDataForAdminCategoriesRoute"
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "/private/admin/categories/5": {
                    "$ref": "#/components/examples/adminCategoriesShow"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Category ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                },
                "examples": {
                  "Error 404 - Category Id not found... `/private/admin/categories/14`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid category Id... `/private/admin/categories/3.5`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "put": {
        "tags": [
          "Private",
          "Admin",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the Admin to modify a category record and its connection with pictures",
        "description": "This endpoint allows the `Admin`, for the category whose ID matches the `id` parameter in the URL, to perform the following operations, either individually or concurrently: \n- modify the `name` and/or the image file (`thumb`) associated with the category \n- disconnect all pictures related to the category by providing, in the `body` of the `request`, the attribute `disconnect` with a value of `true`.<br> \n---\nIf both operations are requested at the same time, the disconnection is contingent upon the successful modification of the `name` and/or `thumb`.<br> \nIf the data update is successful, the operation will be considered successful regardless of the disconnection outcome. The `disconnection` field in the response will inform about the outcome of the requested disconnection.<br>\n---\nFollowing the successful update operation of the category, the `ownerId` field of the category will be updated with the `ID` of the `Admin` who commanded the update.\n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **imageUploader**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `categoryId` identifying the searched `category`."
              }
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/requestBodies/CategoryUpdate"
              },
              "examples": {
                "Only disconnection (all Content-Types)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-1"
                },
                "Disconnection and name update (all Content-Types)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-2"
                },
                "Thumb update and disconnect (Content-Type = multipart/form-data)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-3"
                },
                "Thumb update (Content-Type = multipart/form-data)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-4"
                }
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/requestBodies/CategoryUpdate"
              },
              "examples": {
                "Only disconnection (all Content-Types)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-1"
                },
                "Disconnection and name update (all Content-Types)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-2"
                },
                "Thumb update and disconnect (Content-Type = multipart/form-data)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-3"
                },
                "Thumb update (Content-Type = multipart/form-data)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-4"
                }
              }
            },
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/requestBodies/CategoryUpdate"
              },
              "examples": {
                "Only disconnection (all Content-Types)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-1"
                },
                "Disconnection and name update (all Content-Types)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-2"
                },
                "Thumb update and disconnect (Content-Type = multipart/form-data)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-3"
                },
                "Thumb update (Content-Type = multipart/form-data)": {
                  "$ref": "#/components/examples/CategoryUpdateExample-4"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "***The category update operation was correctly performed.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": "The category data pre-modification and post-modification are returned.<br> Additionally, the `disconnection` field is included only if the disconnection of pictures was requested by setting `disconnect=true` in the `request.body`.\n",
                          "type": "object",
                          "properties": {
                            "previous": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/CategoriesDataForAdminCategoriesRoute"
                                },
                                {
                                  "type": "object",
                                  "description": "All the category's data pre-modification."
                                }
                              ]
                            },
                            "updated": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/CategoriesDataForAdminCategoriesRoute"
                                },
                                {
                                  "type": "object",
                                  "description": "All the category's data post-modification."
                                }
                              ]
                            },
                            "disconnection": {
                              "type": "string",
                              "description": "The outcome of the requested pictures disconnection.",
                              "enum": [
                                "success",
                                "not successed"
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "(Step 1 - on category 3, changing `name` and `disconnect`)": {
                    "$ref": "#/components/examples/adminCategoriesUpdate-1"
                  },
                  "(Step 2 - on picture 3, changing `thumb` and `name`)": {
                    "$ref": "#/components/examples/adminCategoriesUpdate-2"
                  },
                  "(Step 3 - on picture 3, only `disconnect`)": {
                    "$ref": "#/components/examples/adminCategoriesUpdate-3"
                  },
                  "(Step 4 - on picture 3, changing `thumb` and unsuccessed on `disconnect`)": {
                    "$ref": "#/components/examples/adminCategoriesUpdate-4"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Category ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                },
                "examples": {
                  "Error 404 - Category Id not found... `/private/admin/categories/14`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow404"
                  }
                }
              }
            }
          },
          "409": {
            "description": "***Invalid name (slug already existing)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError409-InvalidSlug"
                },
                "examples": {
                  "Error 409": {
                    "$ref": "#/components/examples/failureAdminCategoriesSlug409"
                  }
                }
              }
            }
          },
          "415": {
            "description": "***Image file upload failure***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError415"
                },
                "examples": {
                  "Error 415 - Invalid file extension": {
                    "$ref": "#/components/examples/failureAdminCategoriesUpdate-1"
                  },
                  "Error 415 - Invalid file size": {
                    "$ref": "#/components/examples/failureAdminCategories415-3"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (body or id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid data into request.body": {
                    "$ref": "#/components/examples/failureAdminCategoriesUpdate-2"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      },
      "delete": {
        "tags": [
          "Private",
          "Admin",
          "Categories"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Allows the Admin to delete a category",
        "description": "This endpoint allows the `Admin`, for the category whose ID matches the `id` parameter in the URL, to delete it. \n\n---\nDetailed information can be retrieved from the following information routes:\n- `/info/apiroutes?route[strict]=/private/admin/categories`<br><br>\n- `/info/apiroutes?route[family]=private`<br><br>\n- `/info/apiroutes?route[family]=admin`<br><br>\n- `/info/apiroutes?route[family]=categories`<br><br>\n- `/info/apiroutes?route[family]=all`<br><br>\n\n---\n***Middleware chain***:\n- **authorizationMiddleware**\n- **validationMiddleware**\n",
        "parameters": [
          {
            "allOf": [
              {
                "$ref": "#/components/parameters/IdParam"
              },
              {
                "description": "The `categoryId` identifying the searched `category`."
              }
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "***The category was successfully deleted.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ResponseSchemaForSuccess"
                    },
                    {
                      "type": "object",
                      "description": null,
                      "properties": {
                        "outcome": {
                          "description": null,
                          "type": "object",
                          "properties": {
                            "category": {
                              "allOf": [
                                {
                                  "$ref": "#/components/responses/CategoriesDataForAdminCategoriesRoute"
                                },
                                {
                                  "type": "object",
                                  "description": "The deleted category's data."
                                }
                              ]
                            }
                          }
                        }
                      }
                    }
                  ]
                },
                "examples": {
                  "Category 7 deleted": {
                    "$ref": "#/components/examples/adminCategoriesDelete"
                  }
                }
              }
            }
          },
          "403": {
            "description": "***Error due to invalid or missing Bearer token in headers.Authorization.***",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/responses/ResponseError403-Authorization"
                    },
                    {
                      "description": null
                    }
                  ]
                },
                "examples": {
                  "Error 403": {
                    "$ref": "#/components/examples/failureAuthLogOut403"
                  }
                }
              }
            }
          },
          "404": {
            "description": "***Category ID not found***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError404-CategoryIdNotFound"
                },
                "examples": {
                  "Error 404 - Category Id not found... `/private/admin/categories/14`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow404"
                  }
                }
              }
            }
          },
          "422": {
            "description": "***Validation error (id)***",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/responses/ResponseError422"
                },
                "examples": {
                  "Error 422 - Invalid category Id... `/private/admin/categories/3.5`": {
                    "$ref": "#/components/examples/failureGuestCategoriesShow422"
                  }
                }
              }
            }
          },
          "503": {
            "$ref": "#/components/responses/ResponseError503"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Home"
    },
    {
      "name": "Info/API"
    },
    {
      "name": "Info/Detailed/Routes"
    },
    {
      "name": "Info/Detailed/Queries"
    },
    {
      "name": "Info/Basics/Queries",
      "description": "Basic information regarding the **query parameters** accepted by the `/` endpoint (`GET` method) for each specific route.<br>\nThe `/:id` endpoint (`GET` method) on the same route generally accepts the same query parameters, except for `filters` and `paging`. The exclusion of these parameters is due to their lack of utility in searches for a single record.<br> \nSee the schemas:\n- **Model: Query Parameter's allowed key-value pairs**\n- **Response: Allowed Queries**\n"
    },
    {
      "name": "Authentication",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "Users routes"
    },
    {
      "name": "Pictures",
      "description": "Pictures routes"
    },
    {
      "name": "Categories",
      "description": "Categories routes"
    },
    {
      "name": "Public",
      "description": "All public (guest) routes"
    },
    {
      "name": "Private",
      "description": "All private routes"
    },
    {
      "name": "Publisher",
      "description": "All routes accessible by Publishers"
    },
    {
      "name": "Admin",
      "description": "All routes accessible by Admins"
    }
  ]
}